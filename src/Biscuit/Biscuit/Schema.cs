// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: schema.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Biscuit.Format.Schema {

  /// <summary>Holder for reflection information generated from schema.proto</summary>
  public static partial class SchemaReflection {

    #region Descriptor
    /// <summary>File descriptor for schema.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SchemaReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxzY2hlbWEucHJvdG8SFWJpc2N1aXQuZm9ybWF0LnNjaGVtYSJvCgdCaXNj",
            "dWl0EhEKCWF1dGhvcml0eRgBIAIoDBIOCgZibG9ja3MYAiADKAwSDAoEa2V5",
            "cxgDIAMoDBIzCglzaWduYXR1cmUYBCACKAsyIC5iaXNjdWl0LmZvcm1hdC5z",
            "Y2hlbWEuU2lnbmF0dXJlIkUKDVNlYWxlZEJpc2N1aXQSEQoJYXV0aG9yaXR5",
            "GAEgAigMEg4KBmJsb2NrcxgCIAMoDBIRCglzaWduYXR1cmUYAyACKAwiKgoJ",
            "U2lnbmF0dXJlEhIKCnBhcmFtZXRlcnMYASADKAwSCQoBehgCIAIoDCL1AgoF",
            "QmxvY2sSDQoFaW5kZXgYASACKA0SDwoHc3ltYm9scxgCIAMoCRIvCghmYWN0",
            "c192MBgDIAMoCzIdLmJpc2N1aXQuZm9ybWF0LnNjaGVtYS5GYWN0VjASLwoI",
            "cnVsZXNfdjAYBCADKAsyHS5iaXNjdWl0LmZvcm1hdC5zY2hlbWEuUnVsZVYw",
            "EjMKCmNhdmVhdHNfdjAYBSADKAsyHy5iaXNjdWl0LmZvcm1hdC5zY2hlbWEu",
            "Q2F2ZWF0VjASDwoHY29udGV4dBgGIAEoCRIPCgd2ZXJzaW9uGAcgASgNEi8K",
            "CGZhY3RzX3YxGAggAygLMh0uYmlzY3VpdC5mb3JtYXQuc2NoZW1hLkZhY3RW",
            "MRIvCghydWxlc192MRgJIAMoCzIdLmJpc2N1aXQuZm9ybWF0LnNjaGVtYS5S",
            "dWxlVjESMQoJY2hlY2tzX3YxGAogAygLMh4uYmlzY3VpdC5mb3JtYXQuc2No",
            "ZW1hLkNoZWNrVjEiPwoGRmFjdFYwEjUKCXByZWRpY2F0ZRgBIAIoCzIiLmJp",
            "c2N1aXQuZm9ybWF0LnNjaGVtYS5QcmVkaWNhdGVWMCKmAQoGUnVsZVYwEjAK",
            "BGhlYWQYASACKAsyIi5iaXNjdWl0LmZvcm1hdC5zY2hlbWEuUHJlZGljYXRl",
            "VjASMAoEYm9keRgCIAMoCzIiLmJpc2N1aXQuZm9ybWF0LnNjaGVtYS5QcmVk",
            "aWNhdGVWMBI4Cgtjb25zdHJhaW50cxgDIAMoCzIjLmJpc2N1aXQuZm9ybWF0",
            "LnNjaGVtYS5Db25zdHJhaW50VjAiOgoIQ2F2ZWF0VjASLgoHcXVlcmllcxgB",
            "IAMoCzIdLmJpc2N1aXQuZm9ybWF0LnNjaGVtYS5SdWxlVjAiRQoLUHJlZGlj",
            "YXRlVjASDAoEbmFtZRgBIAIoBBIoCgNpZHMYAiADKAsyGy5iaXNjdWl0LmZv",
            "cm1hdC5zY2hlbWEuSURWMCLgAQoESURWMBIuCgRraW5kGAEgAigOMiAuYmlz",
            "Y3VpdC5mb3JtYXQuc2NoZW1hLklEVjAuS2luZBIOCgZzeW1ib2wYAiABKAQS",
            "EAoIdmFyaWFibGUYAyABKA0SDwoHaW50ZWdlchgEIAEoAxILCgNzdHIYBSAB",
            "KAkSDAoEZGF0ZRgGIAEoBBINCgVieXRlcxgHIAEoDCJLCgRLaW5kEgoKBlNZ",
            "TUJPTBAAEgwKCFZBUklBQkxFEAESCwoHSU5URUdFUhACEgcKA1NUUhADEggK",
            "BERBVEUQBBIJCgVCWVRFUxAFIqgDCgxDb25zdHJhaW50VjASCgoCaWQYASAC",
            "KA0SNgoEa2luZBgCIAIoDjIoLmJpc2N1aXQuZm9ybWF0LnNjaGVtYS5Db25z",
            "dHJhaW50VjAuS2luZBIzCgNpbnQYAyABKAsyJi5iaXNjdWl0LmZvcm1hdC5z",
            "Y2hlbWEuSW50Q29uc3RyYWludFYwEjYKA3N0chgEIAEoCzIpLmJpc2N1aXQu",
            "Zm9ybWF0LnNjaGVtYS5TdHJpbmdDb25zdHJhaW50VjASNQoEZGF0ZRgFIAEo",
            "CzInLmJpc2N1aXQuZm9ybWF0LnNjaGVtYS5EYXRlQ29uc3RyYWludFYwEjkK",
            "BnN5bWJvbBgGIAEoCzIpLmJpc2N1aXQuZm9ybWF0LnNjaGVtYS5TeW1ib2xD",
            "b25zdHJhaW50VjASNwoFYnl0ZXMYByABKAsyKC5iaXNjdWl0LmZvcm1hdC5z",
            "Y2hlbWEuQnl0ZXNDb25zdHJhaW50VjAiPAoES2luZBIHCgNJTlQQABIKCgZT",
            "VFJJTkcQARIICgREQVRFEAISCgoGU1lNQk9MEAMSCQoFQllURVMQBCK+AgoP",
            "SW50Q29uc3RyYWludFYwEjkKBGtpbmQYASACKA4yKy5iaXNjdWl0LmZvcm1h",
            "dC5zY2hlbWEuSW50Q29uc3RyYWludFYwLktpbmQSDQoFbG93ZXIYAiABKAMS",
            "DgoGbGFyZ2VyGAMgASgDEhYKDmxvd2VyX29yX2VxdWFsGAQgASgDEhcKD2xh",
            "cmdlcl9vcl9lcXVhbBgFIAEoAxINCgVlcXVhbBgGIAEoAxISCgZpbl9zZXQY",
            "ByADKANCAhABEhYKCm5vdF9pbl9zZXQYCCADKANCAhABImUKBEtpbmQSCQoF",
            "TE9XRVIQABIKCgZMQVJHRVIQARISCg5MT1dFUl9PUl9FUVVBTBACEhMKD0xB",
            "UkdFUl9PUl9FUVVBTBADEgkKBUVRVUFMEAQSBgoCSU4QBRIKCgZOT1RfSU4Q",
            "BiL+AQoSU3RyaW5nQ29uc3RyYWludFYwEjwKBGtpbmQYASACKA4yLi5iaXNj",
            "dWl0LmZvcm1hdC5zY2hlbWEuU3RyaW5nQ29uc3RyYWludFYwLktpbmQSDgoG",
            "cHJlZml4GAIgASgJEg4KBnN1ZmZpeBgDIAEoCRINCgVlcXVhbBgEIAEoCRIO",
            "CgZpbl9zZXQYBSADKAkSEgoKbm90X2luX3NldBgGIAMoCRINCgVyZWdleBgH",
            "IAEoCSJICgRLaW5kEgoKBlBSRUZJWBAAEgoKBlNVRkZJWBABEgkKBUVRVUFM",
            "EAISBgoCSU4QAxIKCgZOT1RfSU4QBBIJCgVSRUdFWBAFIowBChBEYXRlQ29u",
            "c3RyYWludFYwEjoKBGtpbmQYASACKA4yLC5iaXNjdWl0LmZvcm1hdC5zY2hl",
            "bWEuRGF0ZUNvbnN0cmFpbnRWMC5LaW5kEg4KBmJlZm9yZRgCIAEoBBINCgVh",
            "ZnRlchgDIAEoBCIdCgRLaW5kEgoKBkJFRk9SRRAAEgkKBUFGVEVSEAEikgEK",
            "ElN5bWJvbENvbnN0cmFpbnRWMBI8CgRraW5kGAEgAigOMi4uYmlzY3VpdC5m",
            "b3JtYXQuc2NoZW1hLlN5bWJvbENvbnN0cmFpbnRWMC5LaW5kEg4KBmluX3Nl",
            "dBgCIAMoBBISCgpub3RfaW5fc2V0GAMgAygEIhoKBEtpbmQSBgoCSU4QABIK",
            "CgZOT1RfSU4QASKqAQoRQnl0ZXNDb25zdHJhaW50VjASOwoEa2luZBgBIAIo",
            "DjItLmJpc2N1aXQuZm9ybWF0LnNjaGVtYS5CeXRlc0NvbnN0cmFpbnRWMC5L",
            "aW5kEg0KBWVxdWFsGAIgASgMEg4KBmluX3NldBgDIAMoDBISCgpub3RfaW5f",
            "c2V0GAQgAygMIiUKBEtpbmQSCQoFRVFVQUwQABIGCgJJThABEgoKBk5PVF9J",
            "ThACIj8KBkZhY3RWMRI1CglwcmVkaWNhdGUYASACKAsyIi5iaXNjdWl0LmZv",
            "cm1hdC5zY2hlbWEuUHJlZGljYXRlVjEipgEKBlJ1bGVWMRIwCgRoZWFkGAEg",
            "AigLMiIuYmlzY3VpdC5mb3JtYXQuc2NoZW1hLlByZWRpY2F0ZVYxEjAKBGJv",
            "ZHkYAiADKAsyIi5iaXNjdWl0LmZvcm1hdC5zY2hlbWEuUHJlZGljYXRlVjES",
            "OAoLZXhwcmVzc2lvbnMYAyADKAsyIy5iaXNjdWl0LmZvcm1hdC5zY2hlbWEu",
            "RXhwcmVzc2lvblYxIjkKB0NoZWNrVjESLgoHcXVlcmllcxgBIAMoCzIdLmJp",
            "c2N1aXQuZm9ybWF0LnNjaGVtYS5SdWxlVjEiRQoLUHJlZGljYXRlVjESDAoE",
            "bmFtZRgBIAIoBBIoCgNpZHMYAiADKAsyGy5iaXNjdWl0LmZvcm1hdC5zY2hl",
            "bWEuSURWMSK6AQoESURWMRIQCgZzeW1ib2wYASABKARIABISCgh2YXJpYWJs",
            "ZRgCIAEoDUgAEhEKB2ludGVnZXIYAyABKANIABIQCgZzdHJpbmcYBCABKAlI",
            "ABIOCgRkYXRlGAUgASgESAASDwoFYnl0ZXMYBiABKAxIABIOCgRib29sGAcg",
            "ASgISAASKwoDc2V0GAggASgLMhwuYmlzY3VpdC5mb3JtYXQuc2NoZW1hLklE",
            "U2V0SABCCQoHQ29udGVudCIxCgVJRFNldBIoCgNzZXQYASADKAsyGy5iaXNj",
            "dWl0LmZvcm1hdC5zY2hlbWEuSURWMSLNAgoMQ29uc3RyYWludFYxEgoKAmlk",
            "GAEgAigNEjUKA2ludBgCIAEoCzImLmJpc2N1aXQuZm9ybWF0LnNjaGVtYS5J",
            "bnRDb25zdHJhaW50VjFIABI7CgZzdHJpbmcYAyABKAsyKS5iaXNjdWl0LmZv",
            "cm1hdC5zY2hlbWEuU3RyaW5nQ29uc3RyYWludFYxSAASNwoEZGF0ZRgEIAEo",
            "CzInLmJpc2N1aXQuZm9ybWF0LnNjaGVtYS5EYXRlQ29uc3RyYWludFYxSAAS",
            "OwoGc3ltYm9sGAUgASgLMikuYmlzY3VpdC5mb3JtYXQuc2NoZW1hLlN5bWJv",
            "bENvbnN0cmFpbnRWMUgAEjkKBWJ5dGVzGAYgASgLMiguYmlzY3VpdC5mb3Jt",
            "YXQuc2NoZW1hLkJ5dGVzQ29uc3RyYWludFYxSABCDAoKQ29uc3RyYWludCL4",
            "AQoPSW50Q29uc3RyYWludFYxEhMKCWxlc3NfdGhhbhgBIAEoA0gAEhYKDGdy",
            "ZWF0ZXJfdGhhbhgCIAEoA0gAEhcKDWxlc3Nfb3JfZXF1YWwYAyABKANIABIa",
            "ChBncmVhdGVyX29yX2VxdWFsGAQgASgDSAASDwoFZXF1YWwYBSABKANIABIv",
            "CgZpbl9zZXQYBiABKAsyHS5iaXNjdWl0LmZvcm1hdC5zY2hlbWEuSW50U2V0",
            "SAASMwoKbm90X2luX3NldBgHIAEoCzIdLmJpc2N1aXQuZm9ybWF0LnNjaGVt",
            "YS5JbnRTZXRIAEIMCgpDb25zdHJhaW50IhkKBkludFNldBIPCgNzZXQYByAD",
            "KANCAhABItQBChJTdHJpbmdDb25zdHJhaW50VjESEAoGcHJlZml4GAEgASgJ",
            "SAASEAoGc3VmZml4GAIgASgJSAASDwoFZXF1YWwYAyABKAlIABIyCgZpbl9z",
            "ZXQYBCABKAsyIC5iaXNjdWl0LmZvcm1hdC5zY2hlbWEuU3RyaW5nU2V0SAAS",
            "NgoKbm90X2luX3NldBgFIAEoCzIgLmJpc2N1aXQuZm9ybWF0LnNjaGVtYS5T",
            "dHJpbmdTZXRIABIPCgVyZWdleBgGIAEoCUgAQgwKCkNvbnN0cmFpbnQiGAoJ",
            "U3RyaW5nU2V0EgsKA3NldBgBIAMoCSJDChBEYXRlQ29uc3RyYWludFYxEhAK",
            "BmJlZm9yZRgBIAEoBEgAEg8KBWFmdGVyGAIgASgESABCDAoKQ29uc3RyYWlu",
            "dCKOAQoSU3ltYm9sQ29uc3RyYWludFYxEjIKBmluX3NldBgBIAEoCzIgLmJp",
            "c2N1aXQuZm9ybWF0LnNjaGVtYS5TeW1ib2xTZXRIABI2Cgpub3RfaW5fc2V0",
            "GAIgASgLMiAuYmlzY3VpdC5mb3JtYXQuc2NoZW1hLlN5bWJvbFNldEgAQgwK",
            "CkNvbnN0cmFpbnQiHAoJU3ltYm9sU2V0Eg8KA3NldBgBIAMoBEICEAEinAEK",
            "EUJ5dGVzQ29uc3RyYWludFYxEg8KBWVxdWFsGAEgASgMSAASMQoGaW5fc2V0",
            "GAIgASgLMh8uYmlzY3VpdC5mb3JtYXQuc2NoZW1hLkJ5dGVzU2V0SAASNQoK",
            "bm90X2luX3NldBgDIAEoCzIfLmJpc2N1aXQuZm9ybWF0LnNjaGVtYS5CeXRl",
            "c1NldEgAQgwKCkNvbnN0cmFpbnQiFwoIQnl0ZXNTZXQSCwoDc2V0GAEgAygM",
            "IjYKDEV4cHJlc3Npb25WMRImCgNvcHMYASADKAsyGS5iaXNjdWl0LmZvcm1h",
            "dC5zY2hlbWEuT3AioQEKAk9wEiwKBXZhbHVlGAEgASgLMhsuYmlzY3VpdC5m",
            "b3JtYXQuc2NoZW1hLklEVjFIABIvCgV1bmFyeRgCIAEoCzIeLmJpc2N1aXQu",
            "Zm9ybWF0LnNjaGVtYS5PcFVuYXJ5SAASMQoGQmluYXJ5GAMgASgLMh8uYmlz",
            "Y3VpdC5mb3JtYXQuc2NoZW1hLk9wQmluYXJ5SABCCQoHQ29udGVudCJoCgdP",
            "cFVuYXJ5EjEKBGtpbmQYASACKA4yIy5iaXNjdWl0LmZvcm1hdC5zY2hlbWEu",
            "T3BVbmFyeS5LaW5kIioKBEtpbmQSCgoGTmVnYXRlEAASCgoGUGFyZW5zEAES",
            "CgoGTGVuZ3RoEAIimQIKCE9wQmluYXJ5EjIKBGtpbmQYASACKA4yJC5iaXNj",
            "dWl0LmZvcm1hdC5zY2hlbWEuT3BCaW5hcnkuS2luZCLYAQoES2luZBIMCghM",
            "ZXNzVGhhbhAAEg8KC0dyZWF0ZXJUaGFuEAESDwoLTGVzc09yRXF1YWwQAhIS",
            "Cg5HcmVhdGVyT3JFcXVhbBADEgkKBUVxdWFsEAQSDAoIQ29udGFpbnMQBRIK",
            "CgZQcmVmaXgQBhIKCgZTdWZmaXgQBxIJCgVSZWdleBAIEgcKA0FkZBAJEgcK",
            "A1N1YhAKEgcKA011bBALEgcKA0RpdhAMEgcKA0FuZBANEgYKAk9yEA4SEAoM",
            "SW50ZXJzZWN0aW9uEA8SCQoFVW5pb24QEA=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Biscuit.Format.Schema.Biscuit), global::Biscuit.Format.Schema.Biscuit.Parser, new[]{ "Authority", "Blocks", "Keys", "Signature" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Biscuit.Format.Schema.SealedBiscuit), global::Biscuit.Format.Schema.SealedBiscuit.Parser, new[]{ "Authority", "Blocks", "Signature" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Biscuit.Format.Schema.Signature), global::Biscuit.Format.Schema.Signature.Parser, new[]{ "Parameters", "Z" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Biscuit.Format.Schema.Block), global::Biscuit.Format.Schema.Block.Parser, new[]{ "Index", "Symbols", "FactsV0", "RulesV0", "CaveatsV0", "Context", "Version", "FactsV1", "RulesV1", "ChecksV1" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Biscuit.Format.Schema.FactV0), global::Biscuit.Format.Schema.FactV0.Parser, new[]{ "Predicate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Biscuit.Format.Schema.RuleV0), global::Biscuit.Format.Schema.RuleV0.Parser, new[]{ "Head", "Body", "Constraints" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Biscuit.Format.Schema.CaveatV0), global::Biscuit.Format.Schema.CaveatV0.Parser, new[]{ "Queries" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Biscuit.Format.Schema.PredicateV0), global::Biscuit.Format.Schema.PredicateV0.Parser, new[]{ "Name", "Ids" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Biscuit.Format.Schema.IDV0), global::Biscuit.Format.Schema.IDV0.Parser, new[]{ "Kind", "Symbol", "Variable", "Integer", "Str", "Date", "Bytes" }, null, new[]{ typeof(global::Biscuit.Format.Schema.IDV0.Types.Kind) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Biscuit.Format.Schema.ConstraintV0), global::Biscuit.Format.Schema.ConstraintV0.Parser, new[]{ "Id", "Kind", "Int", "Str", "Date", "Symbol", "Bytes" }, null, new[]{ typeof(global::Biscuit.Format.Schema.ConstraintV0.Types.Kind) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Biscuit.Format.Schema.IntConstraintV0), global::Biscuit.Format.Schema.IntConstraintV0.Parser, new[]{ "Kind", "Lower", "Larger", "LowerOrEqual", "LargerOrEqual", "Equal", "InSet", "NotInSet" }, null, new[]{ typeof(global::Biscuit.Format.Schema.IntConstraintV0.Types.Kind) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Biscuit.Format.Schema.StringConstraintV0), global::Biscuit.Format.Schema.StringConstraintV0.Parser, new[]{ "Kind", "Prefix", "Suffix", "Equal", "InSet", "NotInSet", "Regex" }, null, new[]{ typeof(global::Biscuit.Format.Schema.StringConstraintV0.Types.Kind) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Biscuit.Format.Schema.DateConstraintV0), global::Biscuit.Format.Schema.DateConstraintV0.Parser, new[]{ "Kind", "Before", "After" }, null, new[]{ typeof(global::Biscuit.Format.Schema.DateConstraintV0.Types.Kind) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Biscuit.Format.Schema.SymbolConstraintV0), global::Biscuit.Format.Schema.SymbolConstraintV0.Parser, new[]{ "Kind", "InSet", "NotInSet" }, null, new[]{ typeof(global::Biscuit.Format.Schema.SymbolConstraintV0.Types.Kind) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Biscuit.Format.Schema.BytesConstraintV0), global::Biscuit.Format.Schema.BytesConstraintV0.Parser, new[]{ "Kind", "Equal", "InSet", "NotInSet" }, null, new[]{ typeof(global::Biscuit.Format.Schema.BytesConstraintV0.Types.Kind) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Biscuit.Format.Schema.FactV1), global::Biscuit.Format.Schema.FactV1.Parser, new[]{ "Predicate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Biscuit.Format.Schema.RuleV1), global::Biscuit.Format.Schema.RuleV1.Parser, new[]{ "Head", "Body", "Expressions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Biscuit.Format.Schema.CheckV1), global::Biscuit.Format.Schema.CheckV1.Parser, new[]{ "Queries" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Biscuit.Format.Schema.PredicateV1), global::Biscuit.Format.Schema.PredicateV1.Parser, new[]{ "Name", "Ids" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Biscuit.Format.Schema.IDV1), global::Biscuit.Format.Schema.IDV1.Parser, new[]{ "Symbol", "Variable", "Integer", "String", "Date", "Bytes", "Bool", "Set" }, new[]{ "Content" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Biscuit.Format.Schema.IDSet), global::Biscuit.Format.Schema.IDSet.Parser, new[]{ "Set" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Biscuit.Format.Schema.ConstraintV1), global::Biscuit.Format.Schema.ConstraintV1.Parser, new[]{ "Id", "Int", "String", "Date", "Symbol", "Bytes" }, new[]{ "Constraint" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Biscuit.Format.Schema.IntConstraintV1), global::Biscuit.Format.Schema.IntConstraintV1.Parser, new[]{ "LessThan", "GreaterThan", "LessOrEqual", "GreaterOrEqual", "Equal", "InSet", "NotInSet" }, new[]{ "Constraint" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Biscuit.Format.Schema.IntSet), global::Biscuit.Format.Schema.IntSet.Parser, new[]{ "Set" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Biscuit.Format.Schema.StringConstraintV1), global::Biscuit.Format.Schema.StringConstraintV1.Parser, new[]{ "Prefix", "Suffix", "Equal", "InSet", "NotInSet", "Regex" }, new[]{ "Constraint" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Biscuit.Format.Schema.StringSet), global::Biscuit.Format.Schema.StringSet.Parser, new[]{ "Set" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Biscuit.Format.Schema.DateConstraintV1), global::Biscuit.Format.Schema.DateConstraintV1.Parser, new[]{ "Before", "After" }, new[]{ "Constraint" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Biscuit.Format.Schema.SymbolConstraintV1), global::Biscuit.Format.Schema.SymbolConstraintV1.Parser, new[]{ "InSet", "NotInSet" }, new[]{ "Constraint" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Biscuit.Format.Schema.SymbolSet), global::Biscuit.Format.Schema.SymbolSet.Parser, new[]{ "Set" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Biscuit.Format.Schema.BytesConstraintV1), global::Biscuit.Format.Schema.BytesConstraintV1.Parser, new[]{ "Equal", "InSet", "NotInSet" }, new[]{ "Constraint" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Biscuit.Format.Schema.BytesSet), global::Biscuit.Format.Schema.BytesSet.Parser, new[]{ "Set" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Biscuit.Format.Schema.ExpressionV1), global::Biscuit.Format.Schema.ExpressionV1.Parser, new[]{ "Ops" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Biscuit.Format.Schema.Op), global::Biscuit.Format.Schema.Op.Parser, new[]{ "Value", "Unary", "Binary" }, new[]{ "Content" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Biscuit.Format.Schema.OpUnary), global::Biscuit.Format.Schema.OpUnary.Parser, new[]{ "Kind" }, null, new[]{ typeof(global::Biscuit.Format.Schema.OpUnary.Types.Kind) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Biscuit.Format.Schema.OpBinary), global::Biscuit.Format.Schema.OpBinary.Parser, new[]{ "Kind" }, null, new[]{ typeof(global::Biscuit.Format.Schema.OpBinary.Types.Kind) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Biscuit : pb::IMessage<Biscuit>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Biscuit> _parser = new pb::MessageParser<Biscuit>(() => new Biscuit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Biscuit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Biscuit.Format.Schema.SchemaReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Biscuit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Biscuit(Biscuit other) : this() {
      authority_ = other.authority_;
      blocks_ = other.blocks_.Clone();
      keys_ = other.keys_.Clone();
      signature_ = other.signature_ != null ? other.signature_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Biscuit Clone() {
      return new Biscuit(this);
    }

    /// <summary>Field number for the "authority" field.</summary>
    public const int AuthorityFieldNumber = 1;
    private readonly static pb::ByteString AuthorityDefaultValue = pb::ByteString.Empty;

    private pb::ByteString authority_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Authority {
      get { return authority_ ?? AuthorityDefaultValue; }
      set {
        authority_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "authority" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAuthority {
      get { return authority_ != null; }
    }
    /// <summary>Clears the value of the "authority" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAuthority() {
      authority_ = null;
    }

    /// <summary>Field number for the "blocks" field.</summary>
    public const int BlocksFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_blocks_codec
        = pb::FieldCodec.ForBytes(18);
    private readonly pbc::RepeatedField<pb::ByteString> blocks_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Blocks {
      get { return blocks_; }
    }

    /// <summary>Field number for the "keys" field.</summary>
    public const int KeysFieldNumber = 3;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_keys_codec
        = pb::FieldCodec.ForBytes(26);
    private readonly pbc::RepeatedField<pb::ByteString> keys_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Keys {
      get { return keys_; }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 4;
    private global::Biscuit.Format.Schema.Signature signature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Biscuit.Format.Schema.Signature Signature {
      get { return signature_; }
      set {
        signature_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Biscuit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Biscuit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Authority != other.Authority) return false;
      if(!blocks_.Equals(other.blocks_)) return false;
      if(!keys_.Equals(other.keys_)) return false;
      if (!object.Equals(Signature, other.Signature)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAuthority) hash ^= Authority.GetHashCode();
      hash ^= blocks_.GetHashCode();
      hash ^= keys_.GetHashCode();
      if (signature_ != null) hash ^= Signature.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAuthority) {
        output.WriteRawTag(10);
        output.WriteBytes(Authority);
      }
      blocks_.WriteTo(output, _repeated_blocks_codec);
      keys_.WriteTo(output, _repeated_keys_codec);
      if (signature_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Signature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAuthority) {
        output.WriteRawTag(10);
        output.WriteBytes(Authority);
      }
      blocks_.WriteTo(ref output, _repeated_blocks_codec);
      keys_.WriteTo(ref output, _repeated_keys_codec);
      if (signature_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Signature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAuthority) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Authority);
      }
      size += blocks_.CalculateSize(_repeated_blocks_codec);
      size += keys_.CalculateSize(_repeated_keys_codec);
      if (signature_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Signature);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Biscuit other) {
      if (other == null) {
        return;
      }
      if (other.HasAuthority) {
        Authority = other.Authority;
      }
      blocks_.Add(other.blocks_);
      keys_.Add(other.keys_);
      if (other.signature_ != null) {
        if (signature_ == null) {
          Signature = new global::Biscuit.Format.Schema.Signature();
        }
        Signature.MergeFrom(other.Signature);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Authority = input.ReadBytes();
            break;
          }
          case 18: {
            blocks_.AddEntriesFrom(input, _repeated_blocks_codec);
            break;
          }
          case 26: {
            keys_.AddEntriesFrom(input, _repeated_keys_codec);
            break;
          }
          case 34: {
            if (signature_ == null) {
              Signature = new global::Biscuit.Format.Schema.Signature();
            }
            input.ReadMessage(Signature);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Authority = input.ReadBytes();
            break;
          }
          case 18: {
            blocks_.AddEntriesFrom(ref input, _repeated_blocks_codec);
            break;
          }
          case 26: {
            keys_.AddEntriesFrom(ref input, _repeated_keys_codec);
            break;
          }
          case 34: {
            if (signature_ == null) {
              Signature = new global::Biscuit.Format.Schema.Signature();
            }
            input.ReadMessage(Signature);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SealedBiscuit : pb::IMessage<SealedBiscuit>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SealedBiscuit> _parser = new pb::MessageParser<SealedBiscuit>(() => new SealedBiscuit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SealedBiscuit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Biscuit.Format.Schema.SchemaReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SealedBiscuit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SealedBiscuit(SealedBiscuit other) : this() {
      authority_ = other.authority_;
      blocks_ = other.blocks_.Clone();
      signature_ = other.signature_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SealedBiscuit Clone() {
      return new SealedBiscuit(this);
    }

    /// <summary>Field number for the "authority" field.</summary>
    public const int AuthorityFieldNumber = 1;
    private readonly static pb::ByteString AuthorityDefaultValue = pb::ByteString.Empty;

    private pb::ByteString authority_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Authority {
      get { return authority_ ?? AuthorityDefaultValue; }
      set {
        authority_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "authority" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAuthority {
      get { return authority_ != null; }
    }
    /// <summary>Clears the value of the "authority" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAuthority() {
      authority_ = null;
    }

    /// <summary>Field number for the "blocks" field.</summary>
    public const int BlocksFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_blocks_codec
        = pb::FieldCodec.ForBytes(18);
    private readonly pbc::RepeatedField<pb::ByteString> blocks_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Blocks {
      get { return blocks_; }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 3;
    private readonly static pb::ByteString SignatureDefaultValue = pb::ByteString.Empty;

    private pb::ByteString signature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Signature {
      get { return signature_ ?? SignatureDefaultValue; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "signature" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSignature {
      get { return signature_ != null; }
    }
    /// <summary>Clears the value of the "signature" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSignature() {
      signature_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SealedBiscuit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SealedBiscuit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Authority != other.Authority) return false;
      if(!blocks_.Equals(other.blocks_)) return false;
      if (Signature != other.Signature) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAuthority) hash ^= Authority.GetHashCode();
      hash ^= blocks_.GetHashCode();
      if (HasSignature) hash ^= Signature.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAuthority) {
        output.WriteRawTag(10);
        output.WriteBytes(Authority);
      }
      blocks_.WriteTo(output, _repeated_blocks_codec);
      if (HasSignature) {
        output.WriteRawTag(26);
        output.WriteBytes(Signature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAuthority) {
        output.WriteRawTag(10);
        output.WriteBytes(Authority);
      }
      blocks_.WriteTo(ref output, _repeated_blocks_codec);
      if (HasSignature) {
        output.WriteRawTag(26);
        output.WriteBytes(Signature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAuthority) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Authority);
      }
      size += blocks_.CalculateSize(_repeated_blocks_codec);
      if (HasSignature) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SealedBiscuit other) {
      if (other == null) {
        return;
      }
      if (other.HasAuthority) {
        Authority = other.Authority;
      }
      blocks_.Add(other.blocks_);
      if (other.HasSignature) {
        Signature = other.Signature;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Authority = input.ReadBytes();
            break;
          }
          case 18: {
            blocks_.AddEntriesFrom(input, _repeated_blocks_codec);
            break;
          }
          case 26: {
            Signature = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Authority = input.ReadBytes();
            break;
          }
          case 18: {
            blocks_.AddEntriesFrom(ref input, _repeated_blocks_codec);
            break;
          }
          case 26: {
            Signature = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Signature : pb::IMessage<Signature>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Signature> _parser = new pb::MessageParser<Signature>(() => new Signature());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Signature> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Biscuit.Format.Schema.SchemaReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Signature() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Signature(Signature other) : this() {
      parameters_ = other.parameters_.Clone();
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Signature Clone() {
      return new Signature(this);
    }

    /// <summary>Field number for the "parameters" field.</summary>
    public const int ParametersFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_parameters_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> parameters_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Parameters {
      get { return parameters_; }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 2;
    private readonly static pb::ByteString ZDefaultValue = pb::ByteString.Empty;

    private pb::ByteString z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Z {
      get { return z_ ?? ZDefaultValue; }
      set {
        z_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "z" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasZ {
      get { return z_ != null; }
    }
    /// <summary>Clears the value of the "z" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearZ() {
      z_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Signature);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Signature other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!parameters_.Equals(other.parameters_)) return false;
      if (Z != other.Z) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= parameters_.GetHashCode();
      if (HasZ) hash ^= Z.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      parameters_.WriteTo(output, _repeated_parameters_codec);
      if (HasZ) {
        output.WriteRawTag(18);
        output.WriteBytes(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      parameters_.WriteTo(ref output, _repeated_parameters_codec);
      if (HasZ) {
        output.WriteRawTag(18);
        output.WriteBytes(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += parameters_.CalculateSize(_repeated_parameters_codec);
      if (HasZ) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Z);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Signature other) {
      if (other == null) {
        return;
      }
      parameters_.Add(other.parameters_);
      if (other.HasZ) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            parameters_.AddEntriesFrom(input, _repeated_parameters_codec);
            break;
          }
          case 18: {
            Z = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            parameters_.AddEntriesFrom(ref input, _repeated_parameters_codec);
            break;
          }
          case 18: {
            Z = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Block : pb::IMessage<Block>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Block> _parser = new pb::MessageParser<Block>(() => new Block());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Block> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Biscuit.Format.Schema.SchemaReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Block() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Block(Block other) : this() {
      _hasBits0 = other._hasBits0;
      index_ = other.index_;
      symbols_ = other.symbols_.Clone();
      factsV0_ = other.factsV0_.Clone();
      rulesV0_ = other.rulesV0_.Clone();
      caveatsV0_ = other.caveatsV0_.Clone();
      context_ = other.context_;
      version_ = other.version_;
      factsV1_ = other.factsV1_.Clone();
      rulesV1_ = other.rulesV1_.Clone();
      checksV1_ = other.checksV1_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Block Clone() {
      return new Block(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private readonly static uint IndexDefaultValue = 0;

    private uint index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { if ((_hasBits0 & 1) != 0) { return index_; } else { return IndexDefaultValue; } }
      set {
        _hasBits0 |= 1;
        index_ = value;
      }
    }
    /// <summary>Gets whether the "index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIndex {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIndex() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "symbols" field.</summary>
    public const int SymbolsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_symbols_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> symbols_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Symbols {
      get { return symbols_; }
    }

    /// <summary>Field number for the "facts_v0" field.</summary>
    public const int FactsV0FieldNumber = 3;
    private static readonly pb::FieldCodec<global::Biscuit.Format.Schema.FactV0> _repeated_factsV0_codec
        = pb::FieldCodec.ForMessage(26, global::Biscuit.Format.Schema.FactV0.Parser);
    private readonly pbc::RepeatedField<global::Biscuit.Format.Schema.FactV0> factsV0_ = new pbc::RepeatedField<global::Biscuit.Format.Schema.FactV0>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Biscuit.Format.Schema.FactV0> FactsV0 {
      get { return factsV0_; }
    }

    /// <summary>Field number for the "rules_v0" field.</summary>
    public const int RulesV0FieldNumber = 4;
    private static readonly pb::FieldCodec<global::Biscuit.Format.Schema.RuleV0> _repeated_rulesV0_codec
        = pb::FieldCodec.ForMessage(34, global::Biscuit.Format.Schema.RuleV0.Parser);
    private readonly pbc::RepeatedField<global::Biscuit.Format.Schema.RuleV0> rulesV0_ = new pbc::RepeatedField<global::Biscuit.Format.Schema.RuleV0>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Biscuit.Format.Schema.RuleV0> RulesV0 {
      get { return rulesV0_; }
    }

    /// <summary>Field number for the "caveats_v0" field.</summary>
    public const int CaveatsV0FieldNumber = 5;
    private static readonly pb::FieldCodec<global::Biscuit.Format.Schema.CaveatV0> _repeated_caveatsV0_codec
        = pb::FieldCodec.ForMessage(42, global::Biscuit.Format.Schema.CaveatV0.Parser);
    private readonly pbc::RepeatedField<global::Biscuit.Format.Schema.CaveatV0> caveatsV0_ = new pbc::RepeatedField<global::Biscuit.Format.Schema.CaveatV0>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Biscuit.Format.Schema.CaveatV0> CaveatsV0 {
      get { return caveatsV0_; }
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 6;
    private readonly static string ContextDefaultValue = "";

    private string context_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Context {
      get { return context_ ?? ContextDefaultValue; }
      set {
        context_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "context" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasContext {
      get { return context_ != null; }
    }
    /// <summary>Clears the value of the "context" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContext() {
      context_ = null;
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 7;
    private readonly static uint VersionDefaultValue = 0;

    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { if ((_hasBits0 & 2) != 0) { return version_; } else { return VersionDefaultValue; } }
      set {
        _hasBits0 |= 2;
        version_ = value;
      }
    }
    /// <summary>Gets whether the "version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVersion {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVersion() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "facts_v1" field.</summary>
    public const int FactsV1FieldNumber = 8;
    private static readonly pb::FieldCodec<global::Biscuit.Format.Schema.FactV1> _repeated_factsV1_codec
        = pb::FieldCodec.ForMessage(66, global::Biscuit.Format.Schema.FactV1.Parser);
    private readonly pbc::RepeatedField<global::Biscuit.Format.Schema.FactV1> factsV1_ = new pbc::RepeatedField<global::Biscuit.Format.Schema.FactV1>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Biscuit.Format.Schema.FactV1> FactsV1 {
      get { return factsV1_; }
    }

    /// <summary>Field number for the "rules_v1" field.</summary>
    public const int RulesV1FieldNumber = 9;
    private static readonly pb::FieldCodec<global::Biscuit.Format.Schema.RuleV1> _repeated_rulesV1_codec
        = pb::FieldCodec.ForMessage(74, global::Biscuit.Format.Schema.RuleV1.Parser);
    private readonly pbc::RepeatedField<global::Biscuit.Format.Schema.RuleV1> rulesV1_ = new pbc::RepeatedField<global::Biscuit.Format.Schema.RuleV1>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Biscuit.Format.Schema.RuleV1> RulesV1 {
      get { return rulesV1_; }
    }

    /// <summary>Field number for the "checks_v1" field.</summary>
    public const int ChecksV1FieldNumber = 10;
    private static readonly pb::FieldCodec<global::Biscuit.Format.Schema.CheckV1> _repeated_checksV1_codec
        = pb::FieldCodec.ForMessage(82, global::Biscuit.Format.Schema.CheckV1.Parser);
    private readonly pbc::RepeatedField<global::Biscuit.Format.Schema.CheckV1> checksV1_ = new pbc::RepeatedField<global::Biscuit.Format.Schema.CheckV1>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Biscuit.Format.Schema.CheckV1> ChecksV1 {
      get { return checksV1_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Block);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Block other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if(!symbols_.Equals(other.symbols_)) return false;
      if(!factsV0_.Equals(other.factsV0_)) return false;
      if(!rulesV0_.Equals(other.rulesV0_)) return false;
      if(!caveatsV0_.Equals(other.caveatsV0_)) return false;
      if (Context != other.Context) return false;
      if (Version != other.Version) return false;
      if(!factsV1_.Equals(other.factsV1_)) return false;
      if(!rulesV1_.Equals(other.rulesV1_)) return false;
      if(!checksV1_.Equals(other.checksV1_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasIndex) hash ^= Index.GetHashCode();
      hash ^= symbols_.GetHashCode();
      hash ^= factsV0_.GetHashCode();
      hash ^= rulesV0_.GetHashCode();
      hash ^= caveatsV0_.GetHashCode();
      if (HasContext) hash ^= Context.GetHashCode();
      if (HasVersion) hash ^= Version.GetHashCode();
      hash ^= factsV1_.GetHashCode();
      hash ^= rulesV1_.GetHashCode();
      hash ^= checksV1_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasIndex) {
        output.WriteRawTag(8);
        output.WriteUInt32(Index);
      }
      symbols_.WriteTo(output, _repeated_symbols_codec);
      factsV0_.WriteTo(output, _repeated_factsV0_codec);
      rulesV0_.WriteTo(output, _repeated_rulesV0_codec);
      caveatsV0_.WriteTo(output, _repeated_caveatsV0_codec);
      if (HasContext) {
        output.WriteRawTag(50);
        output.WriteString(Context);
      }
      if (HasVersion) {
        output.WriteRawTag(56);
        output.WriteUInt32(Version);
      }
      factsV1_.WriteTo(output, _repeated_factsV1_codec);
      rulesV1_.WriteTo(output, _repeated_rulesV1_codec);
      checksV1_.WriteTo(output, _repeated_checksV1_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasIndex) {
        output.WriteRawTag(8);
        output.WriteUInt32(Index);
      }
      symbols_.WriteTo(ref output, _repeated_symbols_codec);
      factsV0_.WriteTo(ref output, _repeated_factsV0_codec);
      rulesV0_.WriteTo(ref output, _repeated_rulesV0_codec);
      caveatsV0_.WriteTo(ref output, _repeated_caveatsV0_codec);
      if (HasContext) {
        output.WriteRawTag(50);
        output.WriteString(Context);
      }
      if (HasVersion) {
        output.WriteRawTag(56);
        output.WriteUInt32(Version);
      }
      factsV1_.WriteTo(ref output, _repeated_factsV1_codec);
      rulesV1_.WriteTo(ref output, _repeated_rulesV1_codec);
      checksV1_.WriteTo(ref output, _repeated_checksV1_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasIndex) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      size += symbols_.CalculateSize(_repeated_symbols_codec);
      size += factsV0_.CalculateSize(_repeated_factsV0_codec);
      size += rulesV0_.CalculateSize(_repeated_rulesV0_codec);
      size += caveatsV0_.CalculateSize(_repeated_caveatsV0_codec);
      if (HasContext) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Context);
      }
      if (HasVersion) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      size += factsV1_.CalculateSize(_repeated_factsV1_codec);
      size += rulesV1_.CalculateSize(_repeated_rulesV1_codec);
      size += checksV1_.CalculateSize(_repeated_checksV1_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Block other) {
      if (other == null) {
        return;
      }
      if (other.HasIndex) {
        Index = other.Index;
      }
      symbols_.Add(other.symbols_);
      factsV0_.Add(other.factsV0_);
      rulesV0_.Add(other.rulesV0_);
      caveatsV0_.Add(other.caveatsV0_);
      if (other.HasContext) {
        Context = other.Context;
      }
      if (other.HasVersion) {
        Version = other.Version;
      }
      factsV1_.Add(other.factsV1_);
      rulesV1_.Add(other.rulesV1_);
      checksV1_.Add(other.checksV1_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Index = input.ReadUInt32();
            break;
          }
          case 18: {
            symbols_.AddEntriesFrom(input, _repeated_symbols_codec);
            break;
          }
          case 26: {
            factsV0_.AddEntriesFrom(input, _repeated_factsV0_codec);
            break;
          }
          case 34: {
            rulesV0_.AddEntriesFrom(input, _repeated_rulesV0_codec);
            break;
          }
          case 42: {
            caveatsV0_.AddEntriesFrom(input, _repeated_caveatsV0_codec);
            break;
          }
          case 50: {
            Context = input.ReadString();
            break;
          }
          case 56: {
            Version = input.ReadUInt32();
            break;
          }
          case 66: {
            factsV1_.AddEntriesFrom(input, _repeated_factsV1_codec);
            break;
          }
          case 74: {
            rulesV1_.AddEntriesFrom(input, _repeated_rulesV1_codec);
            break;
          }
          case 82: {
            checksV1_.AddEntriesFrom(input, _repeated_checksV1_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Index = input.ReadUInt32();
            break;
          }
          case 18: {
            symbols_.AddEntriesFrom(ref input, _repeated_symbols_codec);
            break;
          }
          case 26: {
            factsV0_.AddEntriesFrom(ref input, _repeated_factsV0_codec);
            break;
          }
          case 34: {
            rulesV0_.AddEntriesFrom(ref input, _repeated_rulesV0_codec);
            break;
          }
          case 42: {
            caveatsV0_.AddEntriesFrom(ref input, _repeated_caveatsV0_codec);
            break;
          }
          case 50: {
            Context = input.ReadString();
            break;
          }
          case 56: {
            Version = input.ReadUInt32();
            break;
          }
          case 66: {
            factsV1_.AddEntriesFrom(ref input, _repeated_factsV1_codec);
            break;
          }
          case 74: {
            rulesV1_.AddEntriesFrom(ref input, _repeated_rulesV1_codec);
            break;
          }
          case 82: {
            checksV1_.AddEntriesFrom(ref input, _repeated_checksV1_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FactV0 : pb::IMessage<FactV0>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FactV0> _parser = new pb::MessageParser<FactV0>(() => new FactV0());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FactV0> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Biscuit.Format.Schema.SchemaReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FactV0() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FactV0(FactV0 other) : this() {
      predicate_ = other.predicate_ != null ? other.predicate_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FactV0 Clone() {
      return new FactV0(this);
    }

    /// <summary>Field number for the "predicate" field.</summary>
    public const int PredicateFieldNumber = 1;
    private global::Biscuit.Format.Schema.PredicateV0 predicate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Biscuit.Format.Schema.PredicateV0 Predicate {
      get { return predicate_; }
      set {
        predicate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FactV0);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FactV0 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Predicate, other.Predicate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (predicate_ != null) hash ^= Predicate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (predicate_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Predicate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (predicate_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Predicate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (predicate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Predicate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FactV0 other) {
      if (other == null) {
        return;
      }
      if (other.predicate_ != null) {
        if (predicate_ == null) {
          Predicate = new global::Biscuit.Format.Schema.PredicateV0();
        }
        Predicate.MergeFrom(other.Predicate);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (predicate_ == null) {
              Predicate = new global::Biscuit.Format.Schema.PredicateV0();
            }
            input.ReadMessage(Predicate);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (predicate_ == null) {
              Predicate = new global::Biscuit.Format.Schema.PredicateV0();
            }
            input.ReadMessage(Predicate);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RuleV0 : pb::IMessage<RuleV0>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RuleV0> _parser = new pb::MessageParser<RuleV0>(() => new RuleV0());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RuleV0> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Biscuit.Format.Schema.SchemaReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuleV0() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuleV0(RuleV0 other) : this() {
      head_ = other.head_ != null ? other.head_.Clone() : null;
      body_ = other.body_.Clone();
      constraints_ = other.constraints_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuleV0 Clone() {
      return new RuleV0(this);
    }

    /// <summary>Field number for the "head" field.</summary>
    public const int HeadFieldNumber = 1;
    private global::Biscuit.Format.Schema.PredicateV0 head_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Biscuit.Format.Schema.PredicateV0 Head {
      get { return head_; }
      set {
        head_ = value;
      }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Biscuit.Format.Schema.PredicateV0> _repeated_body_codec
        = pb::FieldCodec.ForMessage(18, global::Biscuit.Format.Schema.PredicateV0.Parser);
    private readonly pbc::RepeatedField<global::Biscuit.Format.Schema.PredicateV0> body_ = new pbc::RepeatedField<global::Biscuit.Format.Schema.PredicateV0>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Biscuit.Format.Schema.PredicateV0> Body {
      get { return body_; }
    }

    /// <summary>Field number for the "constraints" field.</summary>
    public const int ConstraintsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Biscuit.Format.Schema.ConstraintV0> _repeated_constraints_codec
        = pb::FieldCodec.ForMessage(26, global::Biscuit.Format.Schema.ConstraintV0.Parser);
    private readonly pbc::RepeatedField<global::Biscuit.Format.Schema.ConstraintV0> constraints_ = new pbc::RepeatedField<global::Biscuit.Format.Schema.ConstraintV0>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Biscuit.Format.Schema.ConstraintV0> Constraints {
      get { return constraints_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RuleV0);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RuleV0 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Head, other.Head)) return false;
      if(!body_.Equals(other.body_)) return false;
      if(!constraints_.Equals(other.constraints_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (head_ != null) hash ^= Head.GetHashCode();
      hash ^= body_.GetHashCode();
      hash ^= constraints_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (head_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Head);
      }
      body_.WriteTo(output, _repeated_body_codec);
      constraints_.WriteTo(output, _repeated_constraints_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (head_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Head);
      }
      body_.WriteTo(ref output, _repeated_body_codec);
      constraints_.WriteTo(ref output, _repeated_constraints_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (head_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Head);
      }
      size += body_.CalculateSize(_repeated_body_codec);
      size += constraints_.CalculateSize(_repeated_constraints_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RuleV0 other) {
      if (other == null) {
        return;
      }
      if (other.head_ != null) {
        if (head_ == null) {
          Head = new global::Biscuit.Format.Schema.PredicateV0();
        }
        Head.MergeFrom(other.Head);
      }
      body_.Add(other.body_);
      constraints_.Add(other.constraints_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (head_ == null) {
              Head = new global::Biscuit.Format.Schema.PredicateV0();
            }
            input.ReadMessage(Head);
            break;
          }
          case 18: {
            body_.AddEntriesFrom(input, _repeated_body_codec);
            break;
          }
          case 26: {
            constraints_.AddEntriesFrom(input, _repeated_constraints_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (head_ == null) {
              Head = new global::Biscuit.Format.Schema.PredicateV0();
            }
            input.ReadMessage(Head);
            break;
          }
          case 18: {
            body_.AddEntriesFrom(ref input, _repeated_body_codec);
            break;
          }
          case 26: {
            constraints_.AddEntriesFrom(ref input, _repeated_constraints_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CaveatV0 : pb::IMessage<CaveatV0>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CaveatV0> _parser = new pb::MessageParser<CaveatV0>(() => new CaveatV0());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CaveatV0> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Biscuit.Format.Schema.SchemaReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CaveatV0() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CaveatV0(CaveatV0 other) : this() {
      queries_ = other.queries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CaveatV0 Clone() {
      return new CaveatV0(this);
    }

    /// <summary>Field number for the "queries" field.</summary>
    public const int QueriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Biscuit.Format.Schema.RuleV0> _repeated_queries_codec
        = pb::FieldCodec.ForMessage(10, global::Biscuit.Format.Schema.RuleV0.Parser);
    private readonly pbc::RepeatedField<global::Biscuit.Format.Schema.RuleV0> queries_ = new pbc::RepeatedField<global::Biscuit.Format.Schema.RuleV0>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Biscuit.Format.Schema.RuleV0> Queries {
      get { return queries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CaveatV0);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CaveatV0 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!queries_.Equals(other.queries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= queries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      queries_.WriteTo(output, _repeated_queries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      queries_.WriteTo(ref output, _repeated_queries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += queries_.CalculateSize(_repeated_queries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CaveatV0 other) {
      if (other == null) {
        return;
      }
      queries_.Add(other.queries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            queries_.AddEntriesFrom(input, _repeated_queries_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            queries_.AddEntriesFrom(ref input, _repeated_queries_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PredicateV0 : pb::IMessage<PredicateV0>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PredicateV0> _parser = new pb::MessageParser<PredicateV0>(() => new PredicateV0());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PredicateV0> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Biscuit.Format.Schema.SchemaReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PredicateV0() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PredicateV0(PredicateV0 other) : this() {
      _hasBits0 = other._hasBits0;
      name_ = other.name_;
      ids_ = other.ids_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PredicateV0 Clone() {
      return new PredicateV0(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private readonly static ulong NameDefaultValue = 0UL;

    private ulong name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Name {
      get { if ((_hasBits0 & 1) != 0) { return name_; } else { return NameDefaultValue; } }
      set {
        _hasBits0 |= 1;
        name_ = value;
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "ids" field.</summary>
    public const int IdsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Biscuit.Format.Schema.IDV0> _repeated_ids_codec
        = pb::FieldCodec.ForMessage(18, global::Biscuit.Format.Schema.IDV0.Parser);
    private readonly pbc::RepeatedField<global::Biscuit.Format.Schema.IDV0> ids_ = new pbc::RepeatedField<global::Biscuit.Format.Schema.IDV0>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Biscuit.Format.Schema.IDV0> Ids {
      get { return ids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PredicateV0);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PredicateV0 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!ids_.Equals(other.ids_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasName) hash ^= Name.GetHashCode();
      hash ^= ids_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasName) {
        output.WriteRawTag(8);
        output.WriteUInt64(Name);
      }
      ids_.WriteTo(output, _repeated_ids_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasName) {
        output.WriteRawTag(8);
        output.WriteUInt64(Name);
      }
      ids_.WriteTo(ref output, _repeated_ids_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Name);
      }
      size += ids_.CalculateSize(_repeated_ids_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PredicateV0 other) {
      if (other == null) {
        return;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      ids_.Add(other.ids_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Name = input.ReadUInt64();
            break;
          }
          case 18: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Name = input.ReadUInt64();
            break;
          }
          case 18: {
            ids_.AddEntriesFrom(ref input, _repeated_ids_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class IDV0 : pb::IMessage<IDV0>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<IDV0> _parser = new pb::MessageParser<IDV0>(() => new IDV0());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IDV0> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Biscuit.Format.Schema.SchemaReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IDV0() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IDV0(IDV0 other) : this() {
      _hasBits0 = other._hasBits0;
      kind_ = other.kind_;
      symbol_ = other.symbol_;
      variable_ = other.variable_;
      integer_ = other.integer_;
      str_ = other.str_;
      date_ = other.date_;
      bytes_ = other.bytes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IDV0 Clone() {
      return new IDV0(this);
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 1;
    private readonly static global::Biscuit.Format.Schema.IDV0.Types.Kind KindDefaultValue = global::Biscuit.Format.Schema.IDV0.Types.Kind.Symbol;

    private global::Biscuit.Format.Schema.IDV0.Types.Kind kind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Biscuit.Format.Schema.IDV0.Types.Kind Kind {
      get { if ((_hasBits0 & 1) != 0) { return kind_; } else { return KindDefaultValue; } }
      set {
        _hasBits0 |= 1;
        kind_ = value;
      }
    }
    /// <summary>Gets whether the "kind" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKind {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "kind" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKind() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 2;
    private readonly static ulong SymbolDefaultValue = 0UL;

    private ulong symbol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Symbol {
      get { if ((_hasBits0 & 2) != 0) { return symbol_; } else { return SymbolDefaultValue; } }
      set {
        _hasBits0 |= 2;
        symbol_ = value;
      }
    }
    /// <summary>Gets whether the "symbol" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSymbol {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "symbol" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSymbol() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "variable" field.</summary>
    public const int VariableFieldNumber = 3;
    private readonly static uint VariableDefaultValue = 0;

    private uint variable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Variable {
      get { if ((_hasBits0 & 4) != 0) { return variable_; } else { return VariableDefaultValue; } }
      set {
        _hasBits0 |= 4;
        variable_ = value;
      }
    }
    /// <summary>Gets whether the "variable" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVariable {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "variable" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVariable() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "integer" field.</summary>
    public const int IntegerFieldNumber = 4;
    private readonly static long IntegerDefaultValue = 0L;

    private long integer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Integer {
      get { if ((_hasBits0 & 8) != 0) { return integer_; } else { return IntegerDefaultValue; } }
      set {
        _hasBits0 |= 8;
        integer_ = value;
      }
    }
    /// <summary>Gets whether the "integer" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInteger {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "integer" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInteger() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "str" field.</summary>
    public const int StrFieldNumber = 5;
    private readonly static string StrDefaultValue = "";

    private string str_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Str {
      get { return str_ ?? StrDefaultValue; }
      set {
        str_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "str" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStr {
      get { return str_ != null; }
    }
    /// <summary>Clears the value of the "str" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStr() {
      str_ = null;
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 6;
    private readonly static ulong DateDefaultValue = 0UL;

    private ulong date_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Date {
      get { if ((_hasBits0 & 16) != 0) { return date_; } else { return DateDefaultValue; } }
      set {
        _hasBits0 |= 16;
        date_ = value;
      }
    }
    /// <summary>Gets whether the "date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDate {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDate() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "bytes" field.</summary>
    public const int BytesFieldNumber = 7;
    private readonly static pb::ByteString BytesDefaultValue = pb::ByteString.Empty;

    private pb::ByteString bytes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Bytes {
      get { return bytes_ ?? BytesDefaultValue; }
      set {
        bytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "bytes" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBytes {
      get { return bytes_ != null; }
    }
    /// <summary>Clears the value of the "bytes" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBytes() {
      bytes_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IDV0);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IDV0 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Kind != other.Kind) return false;
      if (Symbol != other.Symbol) return false;
      if (Variable != other.Variable) return false;
      if (Integer != other.Integer) return false;
      if (Str != other.Str) return false;
      if (Date != other.Date) return false;
      if (Bytes != other.Bytes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasKind) hash ^= Kind.GetHashCode();
      if (HasSymbol) hash ^= Symbol.GetHashCode();
      if (HasVariable) hash ^= Variable.GetHashCode();
      if (HasInteger) hash ^= Integer.GetHashCode();
      if (HasStr) hash ^= Str.GetHashCode();
      if (HasDate) hash ^= Date.GetHashCode();
      if (HasBytes) hash ^= Bytes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasKind) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Kind);
      }
      if (HasSymbol) {
        output.WriteRawTag(16);
        output.WriteUInt64(Symbol);
      }
      if (HasVariable) {
        output.WriteRawTag(24);
        output.WriteUInt32(Variable);
      }
      if (HasInteger) {
        output.WriteRawTag(32);
        output.WriteInt64(Integer);
      }
      if (HasStr) {
        output.WriteRawTag(42);
        output.WriteString(Str);
      }
      if (HasDate) {
        output.WriteRawTag(48);
        output.WriteUInt64(Date);
      }
      if (HasBytes) {
        output.WriteRawTag(58);
        output.WriteBytes(Bytes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasKind) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Kind);
      }
      if (HasSymbol) {
        output.WriteRawTag(16);
        output.WriteUInt64(Symbol);
      }
      if (HasVariable) {
        output.WriteRawTag(24);
        output.WriteUInt32(Variable);
      }
      if (HasInteger) {
        output.WriteRawTag(32);
        output.WriteInt64(Integer);
      }
      if (HasStr) {
        output.WriteRawTag(42);
        output.WriteString(Str);
      }
      if (HasDate) {
        output.WriteRawTag(48);
        output.WriteUInt64(Date);
      }
      if (HasBytes) {
        output.WriteRawTag(58);
        output.WriteBytes(Bytes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasKind) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
      }
      if (HasSymbol) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Symbol);
      }
      if (HasVariable) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Variable);
      }
      if (HasInteger) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Integer);
      }
      if (HasStr) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Str);
      }
      if (HasDate) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Date);
      }
      if (HasBytes) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Bytes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IDV0 other) {
      if (other == null) {
        return;
      }
      if (other.HasKind) {
        Kind = other.Kind;
      }
      if (other.HasSymbol) {
        Symbol = other.Symbol;
      }
      if (other.HasVariable) {
        Variable = other.Variable;
      }
      if (other.HasInteger) {
        Integer = other.Integer;
      }
      if (other.HasStr) {
        Str = other.Str;
      }
      if (other.HasDate) {
        Date = other.Date;
      }
      if (other.HasBytes) {
        Bytes = other.Bytes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Kind = (global::Biscuit.Format.Schema.IDV0.Types.Kind) input.ReadEnum();
            break;
          }
          case 16: {
            Symbol = input.ReadUInt64();
            break;
          }
          case 24: {
            Variable = input.ReadUInt32();
            break;
          }
          case 32: {
            Integer = input.ReadInt64();
            break;
          }
          case 42: {
            Str = input.ReadString();
            break;
          }
          case 48: {
            Date = input.ReadUInt64();
            break;
          }
          case 58: {
            Bytes = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Kind = (global::Biscuit.Format.Schema.IDV0.Types.Kind) input.ReadEnum();
            break;
          }
          case 16: {
            Symbol = input.ReadUInt64();
            break;
          }
          case 24: {
            Variable = input.ReadUInt32();
            break;
          }
          case 32: {
            Integer = input.ReadInt64();
            break;
          }
          case 42: {
            Str = input.ReadString();
            break;
          }
          case 48: {
            Date = input.ReadUInt64();
            break;
          }
          case 58: {
            Bytes = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the IDV0 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Kind {
        [pbr::OriginalName("SYMBOL")] Symbol = 0,
        [pbr::OriginalName("VARIABLE")] Variable = 1,
        [pbr::OriginalName("INTEGER")] Integer = 2,
        [pbr::OriginalName("STR")] Str = 3,
        [pbr::OriginalName("DATE")] Date = 4,
        [pbr::OriginalName("BYTES")] Bytes = 5,
      }

    }
    #endregion

  }

  public sealed partial class ConstraintV0 : pb::IMessage<ConstraintV0>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ConstraintV0> _parser = new pb::MessageParser<ConstraintV0>(() => new ConstraintV0());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConstraintV0> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Biscuit.Format.Schema.SchemaReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConstraintV0() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConstraintV0(ConstraintV0 other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      kind_ = other.kind_;
      int_ = other.int_ != null ? other.int_.Clone() : null;
      str_ = other.str_ != null ? other.str_.Clone() : null;
      date_ = other.date_ != null ? other.date_.Clone() : null;
      symbol_ = other.symbol_ != null ? other.symbol_.Clone() : null;
      bytes_ = other.bytes_ != null ? other.bytes_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConstraintV0 Clone() {
      return new ConstraintV0(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static uint IdDefaultValue = 0;

    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 2;
    private readonly static global::Biscuit.Format.Schema.ConstraintV0.Types.Kind KindDefaultValue = global::Biscuit.Format.Schema.ConstraintV0.Types.Kind.Int;

    private global::Biscuit.Format.Schema.ConstraintV0.Types.Kind kind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Biscuit.Format.Schema.ConstraintV0.Types.Kind Kind {
      get { if ((_hasBits0 & 2) != 0) { return kind_; } else { return KindDefaultValue; } }
      set {
        _hasBits0 |= 2;
        kind_ = value;
      }
    }
    /// <summary>Gets whether the "kind" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKind {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "kind" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKind() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "int" field.</summary>
    public const int IntFieldNumber = 3;
    private global::Biscuit.Format.Schema.IntConstraintV0 int_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Biscuit.Format.Schema.IntConstraintV0 Int {
      get { return int_; }
      set {
        int_ = value;
      }
    }

    /// <summary>Field number for the "str" field.</summary>
    public const int StrFieldNumber = 4;
    private global::Biscuit.Format.Schema.StringConstraintV0 str_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Biscuit.Format.Schema.StringConstraintV0 Str {
      get { return str_; }
      set {
        str_ = value;
      }
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 5;
    private global::Biscuit.Format.Schema.DateConstraintV0 date_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Biscuit.Format.Schema.DateConstraintV0 Date {
      get { return date_; }
      set {
        date_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 6;
    private global::Biscuit.Format.Schema.SymbolConstraintV0 symbol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Biscuit.Format.Schema.SymbolConstraintV0 Symbol {
      get { return symbol_; }
      set {
        symbol_ = value;
      }
    }

    /// <summary>Field number for the "bytes" field.</summary>
    public const int BytesFieldNumber = 7;
    private global::Biscuit.Format.Schema.BytesConstraintV0 bytes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Biscuit.Format.Schema.BytesConstraintV0 Bytes {
      get { return bytes_; }
      set {
        bytes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConstraintV0);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConstraintV0 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Kind != other.Kind) return false;
      if (!object.Equals(Int, other.Int)) return false;
      if (!object.Equals(Str, other.Str)) return false;
      if (!object.Equals(Date, other.Date)) return false;
      if (!object.Equals(Symbol, other.Symbol)) return false;
      if (!object.Equals(Bytes, other.Bytes)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasKind) hash ^= Kind.GetHashCode();
      if (int_ != null) hash ^= Int.GetHashCode();
      if (str_ != null) hash ^= Str.GetHashCode();
      if (date_ != null) hash ^= Date.GetHashCode();
      if (symbol_ != null) hash ^= Symbol.GetHashCode();
      if (bytes_ != null) hash ^= Bytes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (HasKind) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Kind);
      }
      if (int_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Int);
      }
      if (str_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Str);
      }
      if (date_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Date);
      }
      if (symbol_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Symbol);
      }
      if (bytes_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Bytes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (HasKind) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Kind);
      }
      if (int_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Int);
      }
      if (str_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Str);
      }
      if (date_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Date);
      }
      if (symbol_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Symbol);
      }
      if (bytes_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Bytes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (HasKind) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
      }
      if (int_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Int);
      }
      if (str_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Str);
      }
      if (date_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Date);
      }
      if (symbol_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Symbol);
      }
      if (bytes_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bytes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConstraintV0 other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasKind) {
        Kind = other.Kind;
      }
      if (other.int_ != null) {
        if (int_ == null) {
          Int = new global::Biscuit.Format.Schema.IntConstraintV0();
        }
        Int.MergeFrom(other.Int);
      }
      if (other.str_ != null) {
        if (str_ == null) {
          Str = new global::Biscuit.Format.Schema.StringConstraintV0();
        }
        Str.MergeFrom(other.Str);
      }
      if (other.date_ != null) {
        if (date_ == null) {
          Date = new global::Biscuit.Format.Schema.DateConstraintV0();
        }
        Date.MergeFrom(other.Date);
      }
      if (other.symbol_ != null) {
        if (symbol_ == null) {
          Symbol = new global::Biscuit.Format.Schema.SymbolConstraintV0();
        }
        Symbol.MergeFrom(other.Symbol);
      }
      if (other.bytes_ != null) {
        if (bytes_ == null) {
          Bytes = new global::Biscuit.Format.Schema.BytesConstraintV0();
        }
        Bytes.MergeFrom(other.Bytes);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Kind = (global::Biscuit.Format.Schema.ConstraintV0.Types.Kind) input.ReadEnum();
            break;
          }
          case 26: {
            if (int_ == null) {
              Int = new global::Biscuit.Format.Schema.IntConstraintV0();
            }
            input.ReadMessage(Int);
            break;
          }
          case 34: {
            if (str_ == null) {
              Str = new global::Biscuit.Format.Schema.StringConstraintV0();
            }
            input.ReadMessage(Str);
            break;
          }
          case 42: {
            if (date_ == null) {
              Date = new global::Biscuit.Format.Schema.DateConstraintV0();
            }
            input.ReadMessage(Date);
            break;
          }
          case 50: {
            if (symbol_ == null) {
              Symbol = new global::Biscuit.Format.Schema.SymbolConstraintV0();
            }
            input.ReadMessage(Symbol);
            break;
          }
          case 58: {
            if (bytes_ == null) {
              Bytes = new global::Biscuit.Format.Schema.BytesConstraintV0();
            }
            input.ReadMessage(Bytes);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Kind = (global::Biscuit.Format.Schema.ConstraintV0.Types.Kind) input.ReadEnum();
            break;
          }
          case 26: {
            if (int_ == null) {
              Int = new global::Biscuit.Format.Schema.IntConstraintV0();
            }
            input.ReadMessage(Int);
            break;
          }
          case 34: {
            if (str_ == null) {
              Str = new global::Biscuit.Format.Schema.StringConstraintV0();
            }
            input.ReadMessage(Str);
            break;
          }
          case 42: {
            if (date_ == null) {
              Date = new global::Biscuit.Format.Schema.DateConstraintV0();
            }
            input.ReadMessage(Date);
            break;
          }
          case 50: {
            if (symbol_ == null) {
              Symbol = new global::Biscuit.Format.Schema.SymbolConstraintV0();
            }
            input.ReadMessage(Symbol);
            break;
          }
          case 58: {
            if (bytes_ == null) {
              Bytes = new global::Biscuit.Format.Schema.BytesConstraintV0();
            }
            input.ReadMessage(Bytes);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ConstraintV0 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Kind {
        [pbr::OriginalName("INT")] Int = 0,
        [pbr::OriginalName("STRING")] String = 1,
        [pbr::OriginalName("DATE")] Date = 2,
        [pbr::OriginalName("SYMBOL")] Symbol = 3,
        [pbr::OriginalName("BYTES")] Bytes = 4,
      }

    }
    #endregion

  }

  public sealed partial class IntConstraintV0 : pb::IMessage<IntConstraintV0>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<IntConstraintV0> _parser = new pb::MessageParser<IntConstraintV0>(() => new IntConstraintV0());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IntConstraintV0> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Biscuit.Format.Schema.SchemaReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntConstraintV0() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntConstraintV0(IntConstraintV0 other) : this() {
      _hasBits0 = other._hasBits0;
      kind_ = other.kind_;
      lower_ = other.lower_;
      larger_ = other.larger_;
      lowerOrEqual_ = other.lowerOrEqual_;
      largerOrEqual_ = other.largerOrEqual_;
      equal_ = other.equal_;
      inSet_ = other.inSet_.Clone();
      notInSet_ = other.notInSet_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntConstraintV0 Clone() {
      return new IntConstraintV0(this);
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 1;
    private readonly static global::Biscuit.Format.Schema.IntConstraintV0.Types.Kind KindDefaultValue = global::Biscuit.Format.Schema.IntConstraintV0.Types.Kind.Lower;

    private global::Biscuit.Format.Schema.IntConstraintV0.Types.Kind kind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Biscuit.Format.Schema.IntConstraintV0.Types.Kind Kind {
      get { if ((_hasBits0 & 1) != 0) { return kind_; } else { return KindDefaultValue; } }
      set {
        _hasBits0 |= 1;
        kind_ = value;
      }
    }
    /// <summary>Gets whether the "kind" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKind {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "kind" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKind() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lower" field.</summary>
    public const int LowerFieldNumber = 2;
    private readonly static long LowerDefaultValue = 0L;

    private long lower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Lower {
      get { if ((_hasBits0 & 2) != 0) { return lower_; } else { return LowerDefaultValue; } }
      set {
        _hasBits0 |= 2;
        lower_ = value;
      }
    }
    /// <summary>Gets whether the "lower" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLower {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "lower" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLower() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "larger" field.</summary>
    public const int LargerFieldNumber = 3;
    private readonly static long LargerDefaultValue = 0L;

    private long larger_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Larger {
      get { if ((_hasBits0 & 4) != 0) { return larger_; } else { return LargerDefaultValue; } }
      set {
        _hasBits0 |= 4;
        larger_ = value;
      }
    }
    /// <summary>Gets whether the "larger" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLarger {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "larger" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLarger() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "lower_or_equal" field.</summary>
    public const int LowerOrEqualFieldNumber = 4;
    private readonly static long LowerOrEqualDefaultValue = 0L;

    private long lowerOrEqual_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LowerOrEqual {
      get { if ((_hasBits0 & 8) != 0) { return lowerOrEqual_; } else { return LowerOrEqualDefaultValue; } }
      set {
        _hasBits0 |= 8;
        lowerOrEqual_ = value;
      }
    }
    /// <summary>Gets whether the "lower_or_equal" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLowerOrEqual {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "lower_or_equal" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLowerOrEqual() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "larger_or_equal" field.</summary>
    public const int LargerOrEqualFieldNumber = 5;
    private readonly static long LargerOrEqualDefaultValue = 0L;

    private long largerOrEqual_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LargerOrEqual {
      get { if ((_hasBits0 & 16) != 0) { return largerOrEqual_; } else { return LargerOrEqualDefaultValue; } }
      set {
        _hasBits0 |= 16;
        largerOrEqual_ = value;
      }
    }
    /// <summary>Gets whether the "larger_or_equal" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLargerOrEqual {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "larger_or_equal" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLargerOrEqual() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "equal" field.</summary>
    public const int EqualFieldNumber = 6;
    private readonly static long EqualDefaultValue = 0L;

    private long equal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Equal {
      get { if ((_hasBits0 & 32) != 0) { return equal_; } else { return EqualDefaultValue; } }
      set {
        _hasBits0 |= 32;
        equal_ = value;
      }
    }
    /// <summary>Gets whether the "equal" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEqual {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "equal" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEqual() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "in_set" field.</summary>
    public const int InSetFieldNumber = 7;
    private static readonly pb::FieldCodec<long> _repeated_inSet_codec
        = pb::FieldCodec.ForInt64(58);
    private readonly pbc::RepeatedField<long> inSet_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> InSet {
      get { return inSet_; }
    }

    /// <summary>Field number for the "not_in_set" field.</summary>
    public const int NotInSetFieldNumber = 8;
    private static readonly pb::FieldCodec<long> _repeated_notInSet_codec
        = pb::FieldCodec.ForInt64(66);
    private readonly pbc::RepeatedField<long> notInSet_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> NotInSet {
      get { return notInSet_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IntConstraintV0);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IntConstraintV0 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Kind != other.Kind) return false;
      if (Lower != other.Lower) return false;
      if (Larger != other.Larger) return false;
      if (LowerOrEqual != other.LowerOrEqual) return false;
      if (LargerOrEqual != other.LargerOrEqual) return false;
      if (Equal != other.Equal) return false;
      if(!inSet_.Equals(other.inSet_)) return false;
      if(!notInSet_.Equals(other.notInSet_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasKind) hash ^= Kind.GetHashCode();
      if (HasLower) hash ^= Lower.GetHashCode();
      if (HasLarger) hash ^= Larger.GetHashCode();
      if (HasLowerOrEqual) hash ^= LowerOrEqual.GetHashCode();
      if (HasLargerOrEqual) hash ^= LargerOrEqual.GetHashCode();
      if (HasEqual) hash ^= Equal.GetHashCode();
      hash ^= inSet_.GetHashCode();
      hash ^= notInSet_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasKind) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Kind);
      }
      if (HasLower) {
        output.WriteRawTag(16);
        output.WriteInt64(Lower);
      }
      if (HasLarger) {
        output.WriteRawTag(24);
        output.WriteInt64(Larger);
      }
      if (HasLowerOrEqual) {
        output.WriteRawTag(32);
        output.WriteInt64(LowerOrEqual);
      }
      if (HasLargerOrEqual) {
        output.WriteRawTag(40);
        output.WriteInt64(LargerOrEqual);
      }
      if (HasEqual) {
        output.WriteRawTag(48);
        output.WriteInt64(Equal);
      }
      inSet_.WriteTo(output, _repeated_inSet_codec);
      notInSet_.WriteTo(output, _repeated_notInSet_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasKind) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Kind);
      }
      if (HasLower) {
        output.WriteRawTag(16);
        output.WriteInt64(Lower);
      }
      if (HasLarger) {
        output.WriteRawTag(24);
        output.WriteInt64(Larger);
      }
      if (HasLowerOrEqual) {
        output.WriteRawTag(32);
        output.WriteInt64(LowerOrEqual);
      }
      if (HasLargerOrEqual) {
        output.WriteRawTag(40);
        output.WriteInt64(LargerOrEqual);
      }
      if (HasEqual) {
        output.WriteRawTag(48);
        output.WriteInt64(Equal);
      }
      inSet_.WriteTo(ref output, _repeated_inSet_codec);
      notInSet_.WriteTo(ref output, _repeated_notInSet_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasKind) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
      }
      if (HasLower) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Lower);
      }
      if (HasLarger) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Larger);
      }
      if (HasLowerOrEqual) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LowerOrEqual);
      }
      if (HasLargerOrEqual) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LargerOrEqual);
      }
      if (HasEqual) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Equal);
      }
      size += inSet_.CalculateSize(_repeated_inSet_codec);
      size += notInSet_.CalculateSize(_repeated_notInSet_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IntConstraintV0 other) {
      if (other == null) {
        return;
      }
      if (other.HasKind) {
        Kind = other.Kind;
      }
      if (other.HasLower) {
        Lower = other.Lower;
      }
      if (other.HasLarger) {
        Larger = other.Larger;
      }
      if (other.HasLowerOrEqual) {
        LowerOrEqual = other.LowerOrEqual;
      }
      if (other.HasLargerOrEqual) {
        LargerOrEqual = other.LargerOrEqual;
      }
      if (other.HasEqual) {
        Equal = other.Equal;
      }
      inSet_.Add(other.inSet_);
      notInSet_.Add(other.notInSet_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Kind = (global::Biscuit.Format.Schema.IntConstraintV0.Types.Kind) input.ReadEnum();
            break;
          }
          case 16: {
            Lower = input.ReadInt64();
            break;
          }
          case 24: {
            Larger = input.ReadInt64();
            break;
          }
          case 32: {
            LowerOrEqual = input.ReadInt64();
            break;
          }
          case 40: {
            LargerOrEqual = input.ReadInt64();
            break;
          }
          case 48: {
            Equal = input.ReadInt64();
            break;
          }
          case 58:
          case 56: {
            inSet_.AddEntriesFrom(input, _repeated_inSet_codec);
            break;
          }
          case 66:
          case 64: {
            notInSet_.AddEntriesFrom(input, _repeated_notInSet_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Kind = (global::Biscuit.Format.Schema.IntConstraintV0.Types.Kind) input.ReadEnum();
            break;
          }
          case 16: {
            Lower = input.ReadInt64();
            break;
          }
          case 24: {
            Larger = input.ReadInt64();
            break;
          }
          case 32: {
            LowerOrEqual = input.ReadInt64();
            break;
          }
          case 40: {
            LargerOrEqual = input.ReadInt64();
            break;
          }
          case 48: {
            Equal = input.ReadInt64();
            break;
          }
          case 58:
          case 56: {
            inSet_.AddEntriesFrom(ref input, _repeated_inSet_codec);
            break;
          }
          case 66:
          case 64: {
            notInSet_.AddEntriesFrom(ref input, _repeated_notInSet_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the IntConstraintV0 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Kind {
        [pbr::OriginalName("LOWER")] Lower = 0,
        [pbr::OriginalName("LARGER")] Larger = 1,
        [pbr::OriginalName("LOWER_OR_EQUAL")] LowerOrEqual = 2,
        [pbr::OriginalName("LARGER_OR_EQUAL")] LargerOrEqual = 3,
        [pbr::OriginalName("EQUAL")] Equal = 4,
        [pbr::OriginalName("IN")] In = 5,
        [pbr::OriginalName("NOT_IN")] NotIn = 6,
      }

    }
    #endregion

  }

  public sealed partial class StringConstraintV0 : pb::IMessage<StringConstraintV0>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StringConstraintV0> _parser = new pb::MessageParser<StringConstraintV0>(() => new StringConstraintV0());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StringConstraintV0> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Biscuit.Format.Schema.SchemaReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringConstraintV0() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringConstraintV0(StringConstraintV0 other) : this() {
      _hasBits0 = other._hasBits0;
      kind_ = other.kind_;
      prefix_ = other.prefix_;
      suffix_ = other.suffix_;
      equal_ = other.equal_;
      inSet_ = other.inSet_.Clone();
      notInSet_ = other.notInSet_.Clone();
      regex_ = other.regex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringConstraintV0 Clone() {
      return new StringConstraintV0(this);
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 1;
    private readonly static global::Biscuit.Format.Schema.StringConstraintV0.Types.Kind KindDefaultValue = global::Biscuit.Format.Schema.StringConstraintV0.Types.Kind.Prefix;

    private global::Biscuit.Format.Schema.StringConstraintV0.Types.Kind kind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Biscuit.Format.Schema.StringConstraintV0.Types.Kind Kind {
      get { if ((_hasBits0 & 1) != 0) { return kind_; } else { return KindDefaultValue; } }
      set {
        _hasBits0 |= 1;
        kind_ = value;
      }
    }
    /// <summary>Gets whether the "kind" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKind {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "kind" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKind() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "prefix" field.</summary>
    public const int PrefixFieldNumber = 2;
    private readonly static string PrefixDefaultValue = "";

    private string prefix_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Prefix {
      get { return prefix_ ?? PrefixDefaultValue; }
      set {
        prefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "prefix" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrefix {
      get { return prefix_ != null; }
    }
    /// <summary>Clears the value of the "prefix" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrefix() {
      prefix_ = null;
    }

    /// <summary>Field number for the "suffix" field.</summary>
    public const int SuffixFieldNumber = 3;
    private readonly static string SuffixDefaultValue = "";

    private string suffix_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Suffix {
      get { return suffix_ ?? SuffixDefaultValue; }
      set {
        suffix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "suffix" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSuffix {
      get { return suffix_ != null; }
    }
    /// <summary>Clears the value of the "suffix" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSuffix() {
      suffix_ = null;
    }

    /// <summary>Field number for the "equal" field.</summary>
    public const int EqualFieldNumber = 4;
    private readonly static string EqualDefaultValue = "";

    private string equal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Equal {
      get { return equal_ ?? EqualDefaultValue; }
      set {
        equal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "equal" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEqual {
      get { return equal_ != null; }
    }
    /// <summary>Clears the value of the "equal" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEqual() {
      equal_ = null;
    }

    /// <summary>Field number for the "in_set" field.</summary>
    public const int InSetFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_inSet_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> inSet_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> InSet {
      get { return inSet_; }
    }

    /// <summary>Field number for the "not_in_set" field.</summary>
    public const int NotInSetFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_notInSet_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> notInSet_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> NotInSet {
      get { return notInSet_; }
    }

    /// <summary>Field number for the "regex" field.</summary>
    public const int RegexFieldNumber = 7;
    private readonly static string RegexDefaultValue = "";

    private string regex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Regex {
      get { return regex_ ?? RegexDefaultValue; }
      set {
        regex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "regex" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRegex {
      get { return regex_ != null; }
    }
    /// <summary>Clears the value of the "regex" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRegex() {
      regex_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StringConstraintV0);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StringConstraintV0 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Kind != other.Kind) return false;
      if (Prefix != other.Prefix) return false;
      if (Suffix != other.Suffix) return false;
      if (Equal != other.Equal) return false;
      if(!inSet_.Equals(other.inSet_)) return false;
      if(!notInSet_.Equals(other.notInSet_)) return false;
      if (Regex != other.Regex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasKind) hash ^= Kind.GetHashCode();
      if (HasPrefix) hash ^= Prefix.GetHashCode();
      if (HasSuffix) hash ^= Suffix.GetHashCode();
      if (HasEqual) hash ^= Equal.GetHashCode();
      hash ^= inSet_.GetHashCode();
      hash ^= notInSet_.GetHashCode();
      if (HasRegex) hash ^= Regex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasKind) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Kind);
      }
      if (HasPrefix) {
        output.WriteRawTag(18);
        output.WriteString(Prefix);
      }
      if (HasSuffix) {
        output.WriteRawTag(26);
        output.WriteString(Suffix);
      }
      if (HasEqual) {
        output.WriteRawTag(34);
        output.WriteString(Equal);
      }
      inSet_.WriteTo(output, _repeated_inSet_codec);
      notInSet_.WriteTo(output, _repeated_notInSet_codec);
      if (HasRegex) {
        output.WriteRawTag(58);
        output.WriteString(Regex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasKind) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Kind);
      }
      if (HasPrefix) {
        output.WriteRawTag(18);
        output.WriteString(Prefix);
      }
      if (HasSuffix) {
        output.WriteRawTag(26);
        output.WriteString(Suffix);
      }
      if (HasEqual) {
        output.WriteRawTag(34);
        output.WriteString(Equal);
      }
      inSet_.WriteTo(ref output, _repeated_inSet_codec);
      notInSet_.WriteTo(ref output, _repeated_notInSet_codec);
      if (HasRegex) {
        output.WriteRawTag(58);
        output.WriteString(Regex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasKind) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
      }
      if (HasPrefix) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Prefix);
      }
      if (HasSuffix) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Suffix);
      }
      if (HasEqual) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Equal);
      }
      size += inSet_.CalculateSize(_repeated_inSet_codec);
      size += notInSet_.CalculateSize(_repeated_notInSet_codec);
      if (HasRegex) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Regex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StringConstraintV0 other) {
      if (other == null) {
        return;
      }
      if (other.HasKind) {
        Kind = other.Kind;
      }
      if (other.HasPrefix) {
        Prefix = other.Prefix;
      }
      if (other.HasSuffix) {
        Suffix = other.Suffix;
      }
      if (other.HasEqual) {
        Equal = other.Equal;
      }
      inSet_.Add(other.inSet_);
      notInSet_.Add(other.notInSet_);
      if (other.HasRegex) {
        Regex = other.Regex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Kind = (global::Biscuit.Format.Schema.StringConstraintV0.Types.Kind) input.ReadEnum();
            break;
          }
          case 18: {
            Prefix = input.ReadString();
            break;
          }
          case 26: {
            Suffix = input.ReadString();
            break;
          }
          case 34: {
            Equal = input.ReadString();
            break;
          }
          case 42: {
            inSet_.AddEntriesFrom(input, _repeated_inSet_codec);
            break;
          }
          case 50: {
            notInSet_.AddEntriesFrom(input, _repeated_notInSet_codec);
            break;
          }
          case 58: {
            Regex = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Kind = (global::Biscuit.Format.Schema.StringConstraintV0.Types.Kind) input.ReadEnum();
            break;
          }
          case 18: {
            Prefix = input.ReadString();
            break;
          }
          case 26: {
            Suffix = input.ReadString();
            break;
          }
          case 34: {
            Equal = input.ReadString();
            break;
          }
          case 42: {
            inSet_.AddEntriesFrom(ref input, _repeated_inSet_codec);
            break;
          }
          case 50: {
            notInSet_.AddEntriesFrom(ref input, _repeated_notInSet_codec);
            break;
          }
          case 58: {
            Regex = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the StringConstraintV0 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Kind {
        [pbr::OriginalName("PREFIX")] Prefix = 0,
        [pbr::OriginalName("SUFFIX")] Suffix = 1,
        [pbr::OriginalName("EQUAL")] Equal = 2,
        [pbr::OriginalName("IN")] In = 3,
        [pbr::OriginalName("NOT_IN")] NotIn = 4,
        [pbr::OriginalName("REGEX")] Regex = 5,
      }

    }
    #endregion

  }

  public sealed partial class DateConstraintV0 : pb::IMessage<DateConstraintV0>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DateConstraintV0> _parser = new pb::MessageParser<DateConstraintV0>(() => new DateConstraintV0());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DateConstraintV0> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Biscuit.Format.Schema.SchemaReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DateConstraintV0() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DateConstraintV0(DateConstraintV0 other) : this() {
      _hasBits0 = other._hasBits0;
      kind_ = other.kind_;
      before_ = other.before_;
      after_ = other.after_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DateConstraintV0 Clone() {
      return new DateConstraintV0(this);
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 1;
    private readonly static global::Biscuit.Format.Schema.DateConstraintV0.Types.Kind KindDefaultValue = global::Biscuit.Format.Schema.DateConstraintV0.Types.Kind.Before;

    private global::Biscuit.Format.Schema.DateConstraintV0.Types.Kind kind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Biscuit.Format.Schema.DateConstraintV0.Types.Kind Kind {
      get { if ((_hasBits0 & 1) != 0) { return kind_; } else { return KindDefaultValue; } }
      set {
        _hasBits0 |= 1;
        kind_ = value;
      }
    }
    /// <summary>Gets whether the "kind" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKind {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "kind" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKind() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "before" field.</summary>
    public const int BeforeFieldNumber = 2;
    private readonly static ulong BeforeDefaultValue = 0UL;

    private ulong before_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Before {
      get { if ((_hasBits0 & 2) != 0) { return before_; } else { return BeforeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        before_ = value;
      }
    }
    /// <summary>Gets whether the "before" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBefore {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "before" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBefore() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "after" field.</summary>
    public const int AfterFieldNumber = 3;
    private readonly static ulong AfterDefaultValue = 0UL;

    private ulong after_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong After {
      get { if ((_hasBits0 & 4) != 0) { return after_; } else { return AfterDefaultValue; } }
      set {
        _hasBits0 |= 4;
        after_ = value;
      }
    }
    /// <summary>Gets whether the "after" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAfter {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "after" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAfter() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DateConstraintV0);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DateConstraintV0 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Kind != other.Kind) return false;
      if (Before != other.Before) return false;
      if (After != other.After) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasKind) hash ^= Kind.GetHashCode();
      if (HasBefore) hash ^= Before.GetHashCode();
      if (HasAfter) hash ^= After.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasKind) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Kind);
      }
      if (HasBefore) {
        output.WriteRawTag(16);
        output.WriteUInt64(Before);
      }
      if (HasAfter) {
        output.WriteRawTag(24);
        output.WriteUInt64(After);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasKind) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Kind);
      }
      if (HasBefore) {
        output.WriteRawTag(16);
        output.WriteUInt64(Before);
      }
      if (HasAfter) {
        output.WriteRawTag(24);
        output.WriteUInt64(After);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasKind) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
      }
      if (HasBefore) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Before);
      }
      if (HasAfter) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(After);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DateConstraintV0 other) {
      if (other == null) {
        return;
      }
      if (other.HasKind) {
        Kind = other.Kind;
      }
      if (other.HasBefore) {
        Before = other.Before;
      }
      if (other.HasAfter) {
        After = other.After;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Kind = (global::Biscuit.Format.Schema.DateConstraintV0.Types.Kind) input.ReadEnum();
            break;
          }
          case 16: {
            Before = input.ReadUInt64();
            break;
          }
          case 24: {
            After = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Kind = (global::Biscuit.Format.Schema.DateConstraintV0.Types.Kind) input.ReadEnum();
            break;
          }
          case 16: {
            Before = input.ReadUInt64();
            break;
          }
          case 24: {
            After = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the DateConstraintV0 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Kind {
        [pbr::OriginalName("BEFORE")] Before = 0,
        [pbr::OriginalName("AFTER")] After = 1,
      }

    }
    #endregion

  }

  public sealed partial class SymbolConstraintV0 : pb::IMessage<SymbolConstraintV0>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SymbolConstraintV0> _parser = new pb::MessageParser<SymbolConstraintV0>(() => new SymbolConstraintV0());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SymbolConstraintV0> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Biscuit.Format.Schema.SchemaReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolConstraintV0() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolConstraintV0(SymbolConstraintV0 other) : this() {
      _hasBits0 = other._hasBits0;
      kind_ = other.kind_;
      inSet_ = other.inSet_.Clone();
      notInSet_ = other.notInSet_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolConstraintV0 Clone() {
      return new SymbolConstraintV0(this);
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 1;
    private readonly static global::Biscuit.Format.Schema.SymbolConstraintV0.Types.Kind KindDefaultValue = global::Biscuit.Format.Schema.SymbolConstraintV0.Types.Kind.In;

    private global::Biscuit.Format.Schema.SymbolConstraintV0.Types.Kind kind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Biscuit.Format.Schema.SymbolConstraintV0.Types.Kind Kind {
      get { if ((_hasBits0 & 1) != 0) { return kind_; } else { return KindDefaultValue; } }
      set {
        _hasBits0 |= 1;
        kind_ = value;
      }
    }
    /// <summary>Gets whether the "kind" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKind {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "kind" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKind() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "in_set" field.</summary>
    public const int InSetFieldNumber = 2;
    private static readonly pb::FieldCodec<ulong> _repeated_inSet_codec
        = pb::FieldCodec.ForUInt64(16);
    private readonly pbc::RepeatedField<ulong> inSet_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> InSet {
      get { return inSet_; }
    }

    /// <summary>Field number for the "not_in_set" field.</summary>
    public const int NotInSetFieldNumber = 3;
    private static readonly pb::FieldCodec<ulong> _repeated_notInSet_codec
        = pb::FieldCodec.ForUInt64(24);
    private readonly pbc::RepeatedField<ulong> notInSet_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> NotInSet {
      get { return notInSet_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SymbolConstraintV0);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SymbolConstraintV0 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Kind != other.Kind) return false;
      if(!inSet_.Equals(other.inSet_)) return false;
      if(!notInSet_.Equals(other.notInSet_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasKind) hash ^= Kind.GetHashCode();
      hash ^= inSet_.GetHashCode();
      hash ^= notInSet_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasKind) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Kind);
      }
      inSet_.WriteTo(output, _repeated_inSet_codec);
      notInSet_.WriteTo(output, _repeated_notInSet_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasKind) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Kind);
      }
      inSet_.WriteTo(ref output, _repeated_inSet_codec);
      notInSet_.WriteTo(ref output, _repeated_notInSet_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasKind) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
      }
      size += inSet_.CalculateSize(_repeated_inSet_codec);
      size += notInSet_.CalculateSize(_repeated_notInSet_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SymbolConstraintV0 other) {
      if (other == null) {
        return;
      }
      if (other.HasKind) {
        Kind = other.Kind;
      }
      inSet_.Add(other.inSet_);
      notInSet_.Add(other.notInSet_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Kind = (global::Biscuit.Format.Schema.SymbolConstraintV0.Types.Kind) input.ReadEnum();
            break;
          }
          case 18:
          case 16: {
            inSet_.AddEntriesFrom(input, _repeated_inSet_codec);
            break;
          }
          case 26:
          case 24: {
            notInSet_.AddEntriesFrom(input, _repeated_notInSet_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Kind = (global::Biscuit.Format.Schema.SymbolConstraintV0.Types.Kind) input.ReadEnum();
            break;
          }
          case 18:
          case 16: {
            inSet_.AddEntriesFrom(ref input, _repeated_inSet_codec);
            break;
          }
          case 26:
          case 24: {
            notInSet_.AddEntriesFrom(ref input, _repeated_notInSet_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the SymbolConstraintV0 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Kind {
        [pbr::OriginalName("IN")] In = 0,
        [pbr::OriginalName("NOT_IN")] NotIn = 1,
      }

    }
    #endregion

  }

  public sealed partial class BytesConstraintV0 : pb::IMessage<BytesConstraintV0>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BytesConstraintV0> _parser = new pb::MessageParser<BytesConstraintV0>(() => new BytesConstraintV0());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BytesConstraintV0> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Biscuit.Format.Schema.SchemaReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BytesConstraintV0() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BytesConstraintV0(BytesConstraintV0 other) : this() {
      _hasBits0 = other._hasBits0;
      kind_ = other.kind_;
      equal_ = other.equal_;
      inSet_ = other.inSet_.Clone();
      notInSet_ = other.notInSet_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BytesConstraintV0 Clone() {
      return new BytesConstraintV0(this);
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 1;
    private readonly static global::Biscuit.Format.Schema.BytesConstraintV0.Types.Kind KindDefaultValue = global::Biscuit.Format.Schema.BytesConstraintV0.Types.Kind.Equal;

    private global::Biscuit.Format.Schema.BytesConstraintV0.Types.Kind kind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Biscuit.Format.Schema.BytesConstraintV0.Types.Kind Kind {
      get { if ((_hasBits0 & 1) != 0) { return kind_; } else { return KindDefaultValue; } }
      set {
        _hasBits0 |= 1;
        kind_ = value;
      }
    }
    /// <summary>Gets whether the "kind" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKind {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "kind" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKind() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "equal" field.</summary>
    public const int EqualFieldNumber = 2;
    private readonly static pb::ByteString EqualDefaultValue = pb::ByteString.Empty;

    private pb::ByteString equal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Equal {
      get { return equal_ ?? EqualDefaultValue; }
      set {
        equal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "equal" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEqual {
      get { return equal_ != null; }
    }
    /// <summary>Clears the value of the "equal" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEqual() {
      equal_ = null;
    }

    /// <summary>Field number for the "in_set" field.</summary>
    public const int InSetFieldNumber = 3;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_inSet_codec
        = pb::FieldCodec.ForBytes(26);
    private readonly pbc::RepeatedField<pb::ByteString> inSet_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> InSet {
      get { return inSet_; }
    }

    /// <summary>Field number for the "not_in_set" field.</summary>
    public const int NotInSetFieldNumber = 4;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_notInSet_codec
        = pb::FieldCodec.ForBytes(34);
    private readonly pbc::RepeatedField<pb::ByteString> notInSet_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> NotInSet {
      get { return notInSet_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BytesConstraintV0);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BytesConstraintV0 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Kind != other.Kind) return false;
      if (Equal != other.Equal) return false;
      if(!inSet_.Equals(other.inSet_)) return false;
      if(!notInSet_.Equals(other.notInSet_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasKind) hash ^= Kind.GetHashCode();
      if (HasEqual) hash ^= Equal.GetHashCode();
      hash ^= inSet_.GetHashCode();
      hash ^= notInSet_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasKind) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Kind);
      }
      if (HasEqual) {
        output.WriteRawTag(18);
        output.WriteBytes(Equal);
      }
      inSet_.WriteTo(output, _repeated_inSet_codec);
      notInSet_.WriteTo(output, _repeated_notInSet_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasKind) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Kind);
      }
      if (HasEqual) {
        output.WriteRawTag(18);
        output.WriteBytes(Equal);
      }
      inSet_.WriteTo(ref output, _repeated_inSet_codec);
      notInSet_.WriteTo(ref output, _repeated_notInSet_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasKind) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
      }
      if (HasEqual) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Equal);
      }
      size += inSet_.CalculateSize(_repeated_inSet_codec);
      size += notInSet_.CalculateSize(_repeated_notInSet_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BytesConstraintV0 other) {
      if (other == null) {
        return;
      }
      if (other.HasKind) {
        Kind = other.Kind;
      }
      if (other.HasEqual) {
        Equal = other.Equal;
      }
      inSet_.Add(other.inSet_);
      notInSet_.Add(other.notInSet_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Kind = (global::Biscuit.Format.Schema.BytesConstraintV0.Types.Kind) input.ReadEnum();
            break;
          }
          case 18: {
            Equal = input.ReadBytes();
            break;
          }
          case 26: {
            inSet_.AddEntriesFrom(input, _repeated_inSet_codec);
            break;
          }
          case 34: {
            notInSet_.AddEntriesFrom(input, _repeated_notInSet_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Kind = (global::Biscuit.Format.Schema.BytesConstraintV0.Types.Kind) input.ReadEnum();
            break;
          }
          case 18: {
            Equal = input.ReadBytes();
            break;
          }
          case 26: {
            inSet_.AddEntriesFrom(ref input, _repeated_inSet_codec);
            break;
          }
          case 34: {
            notInSet_.AddEntriesFrom(ref input, _repeated_notInSet_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the BytesConstraintV0 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Kind {
        [pbr::OriginalName("EQUAL")] Equal = 0,
        [pbr::OriginalName("IN")] In = 1,
        [pbr::OriginalName("NOT_IN")] NotIn = 2,
      }

    }
    #endregion

  }

  public sealed partial class FactV1 : pb::IMessage<FactV1>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FactV1> _parser = new pb::MessageParser<FactV1>(() => new FactV1());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FactV1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Biscuit.Format.Schema.SchemaReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FactV1() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FactV1(FactV1 other) : this() {
      predicate_ = other.predicate_ != null ? other.predicate_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FactV1 Clone() {
      return new FactV1(this);
    }

    /// <summary>Field number for the "predicate" field.</summary>
    public const int PredicateFieldNumber = 1;
    private global::Biscuit.Format.Schema.PredicateV1 predicate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Biscuit.Format.Schema.PredicateV1 Predicate {
      get { return predicate_; }
      set {
        predicate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FactV1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FactV1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Predicate, other.Predicate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (predicate_ != null) hash ^= Predicate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (predicate_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Predicate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (predicate_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Predicate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (predicate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Predicate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FactV1 other) {
      if (other == null) {
        return;
      }
      if (other.predicate_ != null) {
        if (predicate_ == null) {
          Predicate = new global::Biscuit.Format.Schema.PredicateV1();
        }
        Predicate.MergeFrom(other.Predicate);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (predicate_ == null) {
              Predicate = new global::Biscuit.Format.Schema.PredicateV1();
            }
            input.ReadMessage(Predicate);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (predicate_ == null) {
              Predicate = new global::Biscuit.Format.Schema.PredicateV1();
            }
            input.ReadMessage(Predicate);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RuleV1 : pb::IMessage<RuleV1>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RuleV1> _parser = new pb::MessageParser<RuleV1>(() => new RuleV1());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RuleV1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Biscuit.Format.Schema.SchemaReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuleV1() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuleV1(RuleV1 other) : this() {
      head_ = other.head_ != null ? other.head_.Clone() : null;
      body_ = other.body_.Clone();
      expressions_ = other.expressions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuleV1 Clone() {
      return new RuleV1(this);
    }

    /// <summary>Field number for the "head" field.</summary>
    public const int HeadFieldNumber = 1;
    private global::Biscuit.Format.Schema.PredicateV1 head_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Biscuit.Format.Schema.PredicateV1 Head {
      get { return head_; }
      set {
        head_ = value;
      }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Biscuit.Format.Schema.PredicateV1> _repeated_body_codec
        = pb::FieldCodec.ForMessage(18, global::Biscuit.Format.Schema.PredicateV1.Parser);
    private readonly pbc::RepeatedField<global::Biscuit.Format.Schema.PredicateV1> body_ = new pbc::RepeatedField<global::Biscuit.Format.Schema.PredicateV1>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Biscuit.Format.Schema.PredicateV1> Body {
      get { return body_; }
    }

    /// <summary>Field number for the "expressions" field.</summary>
    public const int ExpressionsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Biscuit.Format.Schema.ExpressionV1> _repeated_expressions_codec
        = pb::FieldCodec.ForMessage(26, global::Biscuit.Format.Schema.ExpressionV1.Parser);
    private readonly pbc::RepeatedField<global::Biscuit.Format.Schema.ExpressionV1> expressions_ = new pbc::RepeatedField<global::Biscuit.Format.Schema.ExpressionV1>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Biscuit.Format.Schema.ExpressionV1> Expressions {
      get { return expressions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RuleV1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RuleV1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Head, other.Head)) return false;
      if(!body_.Equals(other.body_)) return false;
      if(!expressions_.Equals(other.expressions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (head_ != null) hash ^= Head.GetHashCode();
      hash ^= body_.GetHashCode();
      hash ^= expressions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (head_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Head);
      }
      body_.WriteTo(output, _repeated_body_codec);
      expressions_.WriteTo(output, _repeated_expressions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (head_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Head);
      }
      body_.WriteTo(ref output, _repeated_body_codec);
      expressions_.WriteTo(ref output, _repeated_expressions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (head_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Head);
      }
      size += body_.CalculateSize(_repeated_body_codec);
      size += expressions_.CalculateSize(_repeated_expressions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RuleV1 other) {
      if (other == null) {
        return;
      }
      if (other.head_ != null) {
        if (head_ == null) {
          Head = new global::Biscuit.Format.Schema.PredicateV1();
        }
        Head.MergeFrom(other.Head);
      }
      body_.Add(other.body_);
      expressions_.Add(other.expressions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (head_ == null) {
              Head = new global::Biscuit.Format.Schema.PredicateV1();
            }
            input.ReadMessage(Head);
            break;
          }
          case 18: {
            body_.AddEntriesFrom(input, _repeated_body_codec);
            break;
          }
          case 26: {
            expressions_.AddEntriesFrom(input, _repeated_expressions_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (head_ == null) {
              Head = new global::Biscuit.Format.Schema.PredicateV1();
            }
            input.ReadMessage(Head);
            break;
          }
          case 18: {
            body_.AddEntriesFrom(ref input, _repeated_body_codec);
            break;
          }
          case 26: {
            expressions_.AddEntriesFrom(ref input, _repeated_expressions_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CheckV1 : pb::IMessage<CheckV1>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CheckV1> _parser = new pb::MessageParser<CheckV1>(() => new CheckV1());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckV1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Biscuit.Format.Schema.SchemaReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckV1() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckV1(CheckV1 other) : this() {
      queries_ = other.queries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckV1 Clone() {
      return new CheckV1(this);
    }

    /// <summary>Field number for the "queries" field.</summary>
    public const int QueriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Biscuit.Format.Schema.RuleV1> _repeated_queries_codec
        = pb::FieldCodec.ForMessage(10, global::Biscuit.Format.Schema.RuleV1.Parser);
    private readonly pbc::RepeatedField<global::Biscuit.Format.Schema.RuleV1> queries_ = new pbc::RepeatedField<global::Biscuit.Format.Schema.RuleV1>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Biscuit.Format.Schema.RuleV1> Queries {
      get { return queries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckV1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckV1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!queries_.Equals(other.queries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= queries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      queries_.WriteTo(output, _repeated_queries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      queries_.WriteTo(ref output, _repeated_queries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += queries_.CalculateSize(_repeated_queries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckV1 other) {
      if (other == null) {
        return;
      }
      queries_.Add(other.queries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            queries_.AddEntriesFrom(input, _repeated_queries_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            queries_.AddEntriesFrom(ref input, _repeated_queries_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PredicateV1 : pb::IMessage<PredicateV1>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PredicateV1> _parser = new pb::MessageParser<PredicateV1>(() => new PredicateV1());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PredicateV1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Biscuit.Format.Schema.SchemaReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PredicateV1() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PredicateV1(PredicateV1 other) : this() {
      _hasBits0 = other._hasBits0;
      name_ = other.name_;
      ids_ = other.ids_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PredicateV1 Clone() {
      return new PredicateV1(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private readonly static ulong NameDefaultValue = 0UL;

    private ulong name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Name {
      get { if ((_hasBits0 & 1) != 0) { return name_; } else { return NameDefaultValue; } }
      set {
        _hasBits0 |= 1;
        name_ = value;
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "ids" field.</summary>
    public const int IdsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Biscuit.Format.Schema.IDV1> _repeated_ids_codec
        = pb::FieldCodec.ForMessage(18, global::Biscuit.Format.Schema.IDV1.Parser);
    private readonly pbc::RepeatedField<global::Biscuit.Format.Schema.IDV1> ids_ = new pbc::RepeatedField<global::Biscuit.Format.Schema.IDV1>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Biscuit.Format.Schema.IDV1> Ids {
      get { return ids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PredicateV1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PredicateV1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!ids_.Equals(other.ids_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasName) hash ^= Name.GetHashCode();
      hash ^= ids_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasName) {
        output.WriteRawTag(8);
        output.WriteUInt64(Name);
      }
      ids_.WriteTo(output, _repeated_ids_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasName) {
        output.WriteRawTag(8);
        output.WriteUInt64(Name);
      }
      ids_.WriteTo(ref output, _repeated_ids_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Name);
      }
      size += ids_.CalculateSize(_repeated_ids_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PredicateV1 other) {
      if (other == null) {
        return;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      ids_.Add(other.ids_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Name = input.ReadUInt64();
            break;
          }
          case 18: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Name = input.ReadUInt64();
            break;
          }
          case 18: {
            ids_.AddEntriesFrom(ref input, _repeated_ids_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class IDV1 : pb::IMessage<IDV1>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<IDV1> _parser = new pb::MessageParser<IDV1>(() => new IDV1());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IDV1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Biscuit.Format.Schema.SchemaReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IDV1() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IDV1(IDV1 other) : this() {
      switch (other.ContentCase) {
        case ContentOneofCase.Symbol:
          Symbol = other.Symbol;
          break;
        case ContentOneofCase.Variable:
          Variable = other.Variable;
          break;
        case ContentOneofCase.Integer:
          Integer = other.Integer;
          break;
        case ContentOneofCase.String:
          String = other.String;
          break;
        case ContentOneofCase.Date:
          Date = other.Date;
          break;
        case ContentOneofCase.Bytes:
          Bytes = other.Bytes;
          break;
        case ContentOneofCase.Bool:
          Bool = other.Bool;
          break;
        case ContentOneofCase.Set:
          Set = other.Set.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IDV1 Clone() {
      return new IDV1(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Symbol {
      get { return HasSymbol ? (ulong) content_ : 0UL; }
      set {
        content_ = value;
        contentCase_ = ContentOneofCase.Symbol;
      }
    }
    /// <summary>Gets whether the "symbol" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSymbol {
      get { return contentCase_ == ContentOneofCase.Symbol; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "symbol" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSymbol() {
      if (HasSymbol) {
        ClearContent();
      }
    }

    /// <summary>Field number for the "variable" field.</summary>
    public const int VariableFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Variable {
      get { return HasVariable ? (uint) content_ : 0; }
      set {
        content_ = value;
        contentCase_ = ContentOneofCase.Variable;
      }
    }
    /// <summary>Gets whether the "variable" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVariable {
      get { return contentCase_ == ContentOneofCase.Variable; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "variable" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVariable() {
      if (HasVariable) {
        ClearContent();
      }
    }

    /// <summary>Field number for the "integer" field.</summary>
    public const int IntegerFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Integer {
      get { return HasInteger ? (long) content_ : 0L; }
      set {
        content_ = value;
        contentCase_ = ContentOneofCase.Integer;
      }
    }
    /// <summary>Gets whether the "integer" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInteger {
      get { return contentCase_ == ContentOneofCase.Integer; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "integer" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInteger() {
      if (HasInteger) {
        ClearContent();
      }
    }

    /// <summary>Field number for the "string" field.</summary>
    public const int StringFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string String {
      get { return HasString ? (string) content_ : ""; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        contentCase_ = ContentOneofCase.String;
      }
    }
    /// <summary>Gets whether the "string" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasString {
      get { return contentCase_ == ContentOneofCase.String; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "string" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearString() {
      if (HasString) {
        ClearContent();
      }
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Date {
      get { return HasDate ? (ulong) content_ : 0UL; }
      set {
        content_ = value;
        contentCase_ = ContentOneofCase.Date;
      }
    }
    /// <summary>Gets whether the "date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDate {
      get { return contentCase_ == ContentOneofCase.Date; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "date" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDate() {
      if (HasDate) {
        ClearContent();
      }
    }

    /// <summary>Field number for the "bytes" field.</summary>
    public const int BytesFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Bytes {
      get { return HasBytes ? (pb::ByteString) content_ : pb::ByteString.Empty; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        contentCase_ = ContentOneofCase.Bytes;
      }
    }
    /// <summary>Gets whether the "bytes" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBytes {
      get { return contentCase_ == ContentOneofCase.Bytes; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "bytes" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBytes() {
      if (HasBytes) {
        ClearContent();
      }
    }

    /// <summary>Field number for the "bool" field.</summary>
    public const int BoolFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Bool {
      get { return HasBool ? (bool) content_ : false; }
      set {
        content_ = value;
        contentCase_ = ContentOneofCase.Bool;
      }
    }
    /// <summary>Gets whether the "bool" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBool {
      get { return contentCase_ == ContentOneofCase.Bool; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "bool" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBool() {
      if (HasBool) {
        ClearContent();
      }
    }

    /// <summary>Field number for the "set" field.</summary>
    public const int SetFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Biscuit.Format.Schema.IDSet Set {
      get { return contentCase_ == ContentOneofCase.Set ? (global::Biscuit.Format.Schema.IDSet) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.Set;
      }
    }

    private object content_;
    /// <summary>Enum of possible cases for the "Content" oneof.</summary>
    public enum ContentOneofCase {
      None = 0,
      Symbol = 1,
      Variable = 2,
      Integer = 3,
      String = 4,
      Date = 5,
      Bytes = 6,
      Bool = 7,
      Set = 8,
    }
    private ContentOneofCase contentCase_ = ContentOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentOneofCase ContentCase {
      get { return contentCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContent() {
      contentCase_ = ContentOneofCase.None;
      content_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IDV1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IDV1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (Variable != other.Variable) return false;
      if (Integer != other.Integer) return false;
      if (String != other.String) return false;
      if (Date != other.Date) return false;
      if (Bytes != other.Bytes) return false;
      if (Bool != other.Bool) return false;
      if (!object.Equals(Set, other.Set)) return false;
      if (ContentCase != other.ContentCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSymbol) hash ^= Symbol.GetHashCode();
      if (HasVariable) hash ^= Variable.GetHashCode();
      if (HasInteger) hash ^= Integer.GetHashCode();
      if (HasString) hash ^= String.GetHashCode();
      if (HasDate) hash ^= Date.GetHashCode();
      if (HasBytes) hash ^= Bytes.GetHashCode();
      if (HasBool) hash ^= Bool.GetHashCode();
      if (contentCase_ == ContentOneofCase.Set) hash ^= Set.GetHashCode();
      hash ^= (int) contentCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSymbol) {
        output.WriteRawTag(8);
        output.WriteUInt64(Symbol);
      }
      if (HasVariable) {
        output.WriteRawTag(16);
        output.WriteUInt32(Variable);
      }
      if (HasInteger) {
        output.WriteRawTag(24);
        output.WriteInt64(Integer);
      }
      if (HasString) {
        output.WriteRawTag(34);
        output.WriteString(String);
      }
      if (HasDate) {
        output.WriteRawTag(40);
        output.WriteUInt64(Date);
      }
      if (HasBytes) {
        output.WriteRawTag(50);
        output.WriteBytes(Bytes);
      }
      if (HasBool) {
        output.WriteRawTag(56);
        output.WriteBool(Bool);
      }
      if (contentCase_ == ContentOneofCase.Set) {
        output.WriteRawTag(66);
        output.WriteMessage(Set);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSymbol) {
        output.WriteRawTag(8);
        output.WriteUInt64(Symbol);
      }
      if (HasVariable) {
        output.WriteRawTag(16);
        output.WriteUInt32(Variable);
      }
      if (HasInteger) {
        output.WriteRawTag(24);
        output.WriteInt64(Integer);
      }
      if (HasString) {
        output.WriteRawTag(34);
        output.WriteString(String);
      }
      if (HasDate) {
        output.WriteRawTag(40);
        output.WriteUInt64(Date);
      }
      if (HasBytes) {
        output.WriteRawTag(50);
        output.WriteBytes(Bytes);
      }
      if (HasBool) {
        output.WriteRawTag(56);
        output.WriteBool(Bool);
      }
      if (contentCase_ == ContentOneofCase.Set) {
        output.WriteRawTag(66);
        output.WriteMessage(Set);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSymbol) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Symbol);
      }
      if (HasVariable) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Variable);
      }
      if (HasInteger) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Integer);
      }
      if (HasString) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(String);
      }
      if (HasDate) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Date);
      }
      if (HasBytes) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Bytes);
      }
      if (HasBool) {
        size += 1 + 1;
      }
      if (contentCase_ == ContentOneofCase.Set) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Set);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IDV1 other) {
      if (other == null) {
        return;
      }
      switch (other.ContentCase) {
        case ContentOneofCase.Symbol:
          Symbol = other.Symbol;
          break;
        case ContentOneofCase.Variable:
          Variable = other.Variable;
          break;
        case ContentOneofCase.Integer:
          Integer = other.Integer;
          break;
        case ContentOneofCase.String:
          String = other.String;
          break;
        case ContentOneofCase.Date:
          Date = other.Date;
          break;
        case ContentOneofCase.Bytes:
          Bytes = other.Bytes;
          break;
        case ContentOneofCase.Bool:
          Bool = other.Bool;
          break;
        case ContentOneofCase.Set:
          if (Set == null) {
            Set = new global::Biscuit.Format.Schema.IDSet();
          }
          Set.MergeFrom(other.Set);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Symbol = input.ReadUInt64();
            break;
          }
          case 16: {
            Variable = input.ReadUInt32();
            break;
          }
          case 24: {
            Integer = input.ReadInt64();
            break;
          }
          case 34: {
            String = input.ReadString();
            break;
          }
          case 40: {
            Date = input.ReadUInt64();
            break;
          }
          case 50: {
            Bytes = input.ReadBytes();
            break;
          }
          case 56: {
            Bool = input.ReadBool();
            break;
          }
          case 66: {
            global::Biscuit.Format.Schema.IDSet subBuilder = new global::Biscuit.Format.Schema.IDSet();
            if (contentCase_ == ContentOneofCase.Set) {
              subBuilder.MergeFrom(Set);
            }
            input.ReadMessage(subBuilder);
            Set = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Symbol = input.ReadUInt64();
            break;
          }
          case 16: {
            Variable = input.ReadUInt32();
            break;
          }
          case 24: {
            Integer = input.ReadInt64();
            break;
          }
          case 34: {
            String = input.ReadString();
            break;
          }
          case 40: {
            Date = input.ReadUInt64();
            break;
          }
          case 50: {
            Bytes = input.ReadBytes();
            break;
          }
          case 56: {
            Bool = input.ReadBool();
            break;
          }
          case 66: {
            global::Biscuit.Format.Schema.IDSet subBuilder = new global::Biscuit.Format.Schema.IDSet();
            if (contentCase_ == ContentOneofCase.Set) {
              subBuilder.MergeFrom(Set);
            }
            input.ReadMessage(subBuilder);
            Set = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class IDSet : pb::IMessage<IDSet>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<IDSet> _parser = new pb::MessageParser<IDSet>(() => new IDSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IDSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Biscuit.Format.Schema.SchemaReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IDSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IDSet(IDSet other) : this() {
      set_ = other.set_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IDSet Clone() {
      return new IDSet(this);
    }

    /// <summary>Field number for the "set" field.</summary>
    public const int SetFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Biscuit.Format.Schema.IDV1> _repeated_set_codec
        = pb::FieldCodec.ForMessage(10, global::Biscuit.Format.Schema.IDV1.Parser);
    private readonly pbc::RepeatedField<global::Biscuit.Format.Schema.IDV1> set_ = new pbc::RepeatedField<global::Biscuit.Format.Schema.IDV1>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Biscuit.Format.Schema.IDV1> Set {
      get { return set_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IDSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IDSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!set_.Equals(other.set_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= set_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      set_.WriteTo(output, _repeated_set_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      set_.WriteTo(ref output, _repeated_set_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += set_.CalculateSize(_repeated_set_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IDSet other) {
      if (other == null) {
        return;
      }
      set_.Add(other.set_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            set_.AddEntriesFrom(input, _repeated_set_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            set_.AddEntriesFrom(ref input, _repeated_set_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ConstraintV1 : pb::IMessage<ConstraintV1>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ConstraintV1> _parser = new pb::MessageParser<ConstraintV1>(() => new ConstraintV1());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConstraintV1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Biscuit.Format.Schema.SchemaReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConstraintV1() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConstraintV1(ConstraintV1 other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      switch (other.ConstraintCase) {
        case ConstraintOneofCase.Int:
          Int = other.Int.Clone();
          break;
        case ConstraintOneofCase.String:
          String = other.String.Clone();
          break;
        case ConstraintOneofCase.Date:
          Date = other.Date.Clone();
          break;
        case ConstraintOneofCase.Symbol:
          Symbol = other.Symbol.Clone();
          break;
        case ConstraintOneofCase.Bytes:
          Bytes = other.Bytes.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConstraintV1 Clone() {
      return new ConstraintV1(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static uint IdDefaultValue = 0;

    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "int" field.</summary>
    public const int IntFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Biscuit.Format.Schema.IntConstraintV1 Int {
      get { return constraintCase_ == ConstraintOneofCase.Int ? (global::Biscuit.Format.Schema.IntConstraintV1) constraint_ : null; }
      set {
        constraint_ = value;
        constraintCase_ = value == null ? ConstraintOneofCase.None : ConstraintOneofCase.Int;
      }
    }

    /// <summary>Field number for the "string" field.</summary>
    public const int StringFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Biscuit.Format.Schema.StringConstraintV1 String {
      get { return constraintCase_ == ConstraintOneofCase.String ? (global::Biscuit.Format.Schema.StringConstraintV1) constraint_ : null; }
      set {
        constraint_ = value;
        constraintCase_ = value == null ? ConstraintOneofCase.None : ConstraintOneofCase.String;
      }
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Biscuit.Format.Schema.DateConstraintV1 Date {
      get { return constraintCase_ == ConstraintOneofCase.Date ? (global::Biscuit.Format.Schema.DateConstraintV1) constraint_ : null; }
      set {
        constraint_ = value;
        constraintCase_ = value == null ? ConstraintOneofCase.None : ConstraintOneofCase.Date;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Biscuit.Format.Schema.SymbolConstraintV1 Symbol {
      get { return constraintCase_ == ConstraintOneofCase.Symbol ? (global::Biscuit.Format.Schema.SymbolConstraintV1) constraint_ : null; }
      set {
        constraint_ = value;
        constraintCase_ = value == null ? ConstraintOneofCase.None : ConstraintOneofCase.Symbol;
      }
    }

    /// <summary>Field number for the "bytes" field.</summary>
    public const int BytesFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Biscuit.Format.Schema.BytesConstraintV1 Bytes {
      get { return constraintCase_ == ConstraintOneofCase.Bytes ? (global::Biscuit.Format.Schema.BytesConstraintV1) constraint_ : null; }
      set {
        constraint_ = value;
        constraintCase_ = value == null ? ConstraintOneofCase.None : ConstraintOneofCase.Bytes;
      }
    }

    private object constraint_;
    /// <summary>Enum of possible cases for the "Constraint" oneof.</summary>
    public enum ConstraintOneofCase {
      None = 0,
      Int = 2,
      String = 3,
      Date = 4,
      Symbol = 5,
      Bytes = 6,
    }
    private ConstraintOneofCase constraintCase_ = ConstraintOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConstraintOneofCase ConstraintCase {
      get { return constraintCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConstraint() {
      constraintCase_ = ConstraintOneofCase.None;
      constraint_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConstraintV1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConstraintV1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Int, other.Int)) return false;
      if (!object.Equals(String, other.String)) return false;
      if (!object.Equals(Date, other.Date)) return false;
      if (!object.Equals(Symbol, other.Symbol)) return false;
      if (!object.Equals(Bytes, other.Bytes)) return false;
      if (ConstraintCase != other.ConstraintCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (constraintCase_ == ConstraintOneofCase.Int) hash ^= Int.GetHashCode();
      if (constraintCase_ == ConstraintOneofCase.String) hash ^= String.GetHashCode();
      if (constraintCase_ == ConstraintOneofCase.Date) hash ^= Date.GetHashCode();
      if (constraintCase_ == ConstraintOneofCase.Symbol) hash ^= Symbol.GetHashCode();
      if (constraintCase_ == ConstraintOneofCase.Bytes) hash ^= Bytes.GetHashCode();
      hash ^= (int) constraintCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (constraintCase_ == ConstraintOneofCase.Int) {
        output.WriteRawTag(18);
        output.WriteMessage(Int);
      }
      if (constraintCase_ == ConstraintOneofCase.String) {
        output.WriteRawTag(26);
        output.WriteMessage(String);
      }
      if (constraintCase_ == ConstraintOneofCase.Date) {
        output.WriteRawTag(34);
        output.WriteMessage(Date);
      }
      if (constraintCase_ == ConstraintOneofCase.Symbol) {
        output.WriteRawTag(42);
        output.WriteMessage(Symbol);
      }
      if (constraintCase_ == ConstraintOneofCase.Bytes) {
        output.WriteRawTag(50);
        output.WriteMessage(Bytes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (constraintCase_ == ConstraintOneofCase.Int) {
        output.WriteRawTag(18);
        output.WriteMessage(Int);
      }
      if (constraintCase_ == ConstraintOneofCase.String) {
        output.WriteRawTag(26);
        output.WriteMessage(String);
      }
      if (constraintCase_ == ConstraintOneofCase.Date) {
        output.WriteRawTag(34);
        output.WriteMessage(Date);
      }
      if (constraintCase_ == ConstraintOneofCase.Symbol) {
        output.WriteRawTag(42);
        output.WriteMessage(Symbol);
      }
      if (constraintCase_ == ConstraintOneofCase.Bytes) {
        output.WriteRawTag(50);
        output.WriteMessage(Bytes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (constraintCase_ == ConstraintOneofCase.Int) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Int);
      }
      if (constraintCase_ == ConstraintOneofCase.String) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(String);
      }
      if (constraintCase_ == ConstraintOneofCase.Date) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Date);
      }
      if (constraintCase_ == ConstraintOneofCase.Symbol) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Symbol);
      }
      if (constraintCase_ == ConstraintOneofCase.Bytes) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bytes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConstraintV1 other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      switch (other.ConstraintCase) {
        case ConstraintOneofCase.Int:
          if (Int == null) {
            Int = new global::Biscuit.Format.Schema.IntConstraintV1();
          }
          Int.MergeFrom(other.Int);
          break;
        case ConstraintOneofCase.String:
          if (String == null) {
            String = new global::Biscuit.Format.Schema.StringConstraintV1();
          }
          String.MergeFrom(other.String);
          break;
        case ConstraintOneofCase.Date:
          if (Date == null) {
            Date = new global::Biscuit.Format.Schema.DateConstraintV1();
          }
          Date.MergeFrom(other.Date);
          break;
        case ConstraintOneofCase.Symbol:
          if (Symbol == null) {
            Symbol = new global::Biscuit.Format.Schema.SymbolConstraintV1();
          }
          Symbol.MergeFrom(other.Symbol);
          break;
        case ConstraintOneofCase.Bytes:
          if (Bytes == null) {
            Bytes = new global::Biscuit.Format.Schema.BytesConstraintV1();
          }
          Bytes.MergeFrom(other.Bytes);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            global::Biscuit.Format.Schema.IntConstraintV1 subBuilder = new global::Biscuit.Format.Schema.IntConstraintV1();
            if (constraintCase_ == ConstraintOneofCase.Int) {
              subBuilder.MergeFrom(Int);
            }
            input.ReadMessage(subBuilder);
            Int = subBuilder;
            break;
          }
          case 26: {
            global::Biscuit.Format.Schema.StringConstraintV1 subBuilder = new global::Biscuit.Format.Schema.StringConstraintV1();
            if (constraintCase_ == ConstraintOneofCase.String) {
              subBuilder.MergeFrom(String);
            }
            input.ReadMessage(subBuilder);
            String = subBuilder;
            break;
          }
          case 34: {
            global::Biscuit.Format.Schema.DateConstraintV1 subBuilder = new global::Biscuit.Format.Schema.DateConstraintV1();
            if (constraintCase_ == ConstraintOneofCase.Date) {
              subBuilder.MergeFrom(Date);
            }
            input.ReadMessage(subBuilder);
            Date = subBuilder;
            break;
          }
          case 42: {
            global::Biscuit.Format.Schema.SymbolConstraintV1 subBuilder = new global::Biscuit.Format.Schema.SymbolConstraintV1();
            if (constraintCase_ == ConstraintOneofCase.Symbol) {
              subBuilder.MergeFrom(Symbol);
            }
            input.ReadMessage(subBuilder);
            Symbol = subBuilder;
            break;
          }
          case 50: {
            global::Biscuit.Format.Schema.BytesConstraintV1 subBuilder = new global::Biscuit.Format.Schema.BytesConstraintV1();
            if (constraintCase_ == ConstraintOneofCase.Bytes) {
              subBuilder.MergeFrom(Bytes);
            }
            input.ReadMessage(subBuilder);
            Bytes = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            global::Biscuit.Format.Schema.IntConstraintV1 subBuilder = new global::Biscuit.Format.Schema.IntConstraintV1();
            if (constraintCase_ == ConstraintOneofCase.Int) {
              subBuilder.MergeFrom(Int);
            }
            input.ReadMessage(subBuilder);
            Int = subBuilder;
            break;
          }
          case 26: {
            global::Biscuit.Format.Schema.StringConstraintV1 subBuilder = new global::Biscuit.Format.Schema.StringConstraintV1();
            if (constraintCase_ == ConstraintOneofCase.String) {
              subBuilder.MergeFrom(String);
            }
            input.ReadMessage(subBuilder);
            String = subBuilder;
            break;
          }
          case 34: {
            global::Biscuit.Format.Schema.DateConstraintV1 subBuilder = new global::Biscuit.Format.Schema.DateConstraintV1();
            if (constraintCase_ == ConstraintOneofCase.Date) {
              subBuilder.MergeFrom(Date);
            }
            input.ReadMessage(subBuilder);
            Date = subBuilder;
            break;
          }
          case 42: {
            global::Biscuit.Format.Schema.SymbolConstraintV1 subBuilder = new global::Biscuit.Format.Schema.SymbolConstraintV1();
            if (constraintCase_ == ConstraintOneofCase.Symbol) {
              subBuilder.MergeFrom(Symbol);
            }
            input.ReadMessage(subBuilder);
            Symbol = subBuilder;
            break;
          }
          case 50: {
            global::Biscuit.Format.Schema.BytesConstraintV1 subBuilder = new global::Biscuit.Format.Schema.BytesConstraintV1();
            if (constraintCase_ == ConstraintOneofCase.Bytes) {
              subBuilder.MergeFrom(Bytes);
            }
            input.ReadMessage(subBuilder);
            Bytes = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class IntConstraintV1 : pb::IMessage<IntConstraintV1>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<IntConstraintV1> _parser = new pb::MessageParser<IntConstraintV1>(() => new IntConstraintV1());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IntConstraintV1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Biscuit.Format.Schema.SchemaReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntConstraintV1() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntConstraintV1(IntConstraintV1 other) : this() {
      switch (other.ConstraintCase) {
        case ConstraintOneofCase.LessThan:
          LessThan = other.LessThan;
          break;
        case ConstraintOneofCase.GreaterThan:
          GreaterThan = other.GreaterThan;
          break;
        case ConstraintOneofCase.LessOrEqual:
          LessOrEqual = other.LessOrEqual;
          break;
        case ConstraintOneofCase.GreaterOrEqual:
          GreaterOrEqual = other.GreaterOrEqual;
          break;
        case ConstraintOneofCase.Equal:
          Equal = other.Equal;
          break;
        case ConstraintOneofCase.InSet:
          InSet = other.InSet.Clone();
          break;
        case ConstraintOneofCase.NotInSet:
          NotInSet = other.NotInSet.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntConstraintV1 Clone() {
      return new IntConstraintV1(this);
    }

    /// <summary>Field number for the "less_than" field.</summary>
    public const int LessThanFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LessThan {
      get { return HasLessThan ? (long) constraint_ : 0L; }
      set {
        constraint_ = value;
        constraintCase_ = ConstraintOneofCase.LessThan;
      }
    }
    /// <summary>Gets whether the "less_than" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLessThan {
      get { return constraintCase_ == ConstraintOneofCase.LessThan; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "less_than" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLessThan() {
      if (HasLessThan) {
        ClearConstraint();
      }
    }

    /// <summary>Field number for the "greater_than" field.</summary>
    public const int GreaterThanFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GreaterThan {
      get { return HasGreaterThan ? (long) constraint_ : 0L; }
      set {
        constraint_ = value;
        constraintCase_ = ConstraintOneofCase.GreaterThan;
      }
    }
    /// <summary>Gets whether the "greater_than" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGreaterThan {
      get { return constraintCase_ == ConstraintOneofCase.GreaterThan; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "greater_than" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGreaterThan() {
      if (HasGreaterThan) {
        ClearConstraint();
      }
    }

    /// <summary>Field number for the "less_or_equal" field.</summary>
    public const int LessOrEqualFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LessOrEqual {
      get { return HasLessOrEqual ? (long) constraint_ : 0L; }
      set {
        constraint_ = value;
        constraintCase_ = ConstraintOneofCase.LessOrEqual;
      }
    }
    /// <summary>Gets whether the "less_or_equal" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLessOrEqual {
      get { return constraintCase_ == ConstraintOneofCase.LessOrEqual; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "less_or_equal" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLessOrEqual() {
      if (HasLessOrEqual) {
        ClearConstraint();
      }
    }

    /// <summary>Field number for the "greater_or_equal" field.</summary>
    public const int GreaterOrEqualFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GreaterOrEqual {
      get { return HasGreaterOrEqual ? (long) constraint_ : 0L; }
      set {
        constraint_ = value;
        constraintCase_ = ConstraintOneofCase.GreaterOrEqual;
      }
    }
    /// <summary>Gets whether the "greater_or_equal" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGreaterOrEqual {
      get { return constraintCase_ == ConstraintOneofCase.GreaterOrEqual; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "greater_or_equal" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGreaterOrEqual() {
      if (HasGreaterOrEqual) {
        ClearConstraint();
      }
    }

    /// <summary>Field number for the "equal" field.</summary>
    public const int EqualFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Equal {
      get { return HasEqual ? (long) constraint_ : 0L; }
      set {
        constraint_ = value;
        constraintCase_ = ConstraintOneofCase.Equal;
      }
    }
    /// <summary>Gets whether the "equal" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEqual {
      get { return constraintCase_ == ConstraintOneofCase.Equal; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "equal" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEqual() {
      if (HasEqual) {
        ClearConstraint();
      }
    }

    /// <summary>Field number for the "in_set" field.</summary>
    public const int InSetFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Biscuit.Format.Schema.IntSet InSet {
      get { return constraintCase_ == ConstraintOneofCase.InSet ? (global::Biscuit.Format.Schema.IntSet) constraint_ : null; }
      set {
        constraint_ = value;
        constraintCase_ = value == null ? ConstraintOneofCase.None : ConstraintOneofCase.InSet;
      }
    }

    /// <summary>Field number for the "not_in_set" field.</summary>
    public const int NotInSetFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Biscuit.Format.Schema.IntSet NotInSet {
      get { return constraintCase_ == ConstraintOneofCase.NotInSet ? (global::Biscuit.Format.Schema.IntSet) constraint_ : null; }
      set {
        constraint_ = value;
        constraintCase_ = value == null ? ConstraintOneofCase.None : ConstraintOneofCase.NotInSet;
      }
    }

    private object constraint_;
    /// <summary>Enum of possible cases for the "Constraint" oneof.</summary>
    public enum ConstraintOneofCase {
      None = 0,
      LessThan = 1,
      GreaterThan = 2,
      LessOrEqual = 3,
      GreaterOrEqual = 4,
      Equal = 5,
      InSet = 6,
      NotInSet = 7,
    }
    private ConstraintOneofCase constraintCase_ = ConstraintOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConstraintOneofCase ConstraintCase {
      get { return constraintCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConstraint() {
      constraintCase_ = ConstraintOneofCase.None;
      constraint_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IntConstraintV1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IntConstraintV1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LessThan != other.LessThan) return false;
      if (GreaterThan != other.GreaterThan) return false;
      if (LessOrEqual != other.LessOrEqual) return false;
      if (GreaterOrEqual != other.GreaterOrEqual) return false;
      if (Equal != other.Equal) return false;
      if (!object.Equals(InSet, other.InSet)) return false;
      if (!object.Equals(NotInSet, other.NotInSet)) return false;
      if (ConstraintCase != other.ConstraintCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLessThan) hash ^= LessThan.GetHashCode();
      if (HasGreaterThan) hash ^= GreaterThan.GetHashCode();
      if (HasLessOrEqual) hash ^= LessOrEqual.GetHashCode();
      if (HasGreaterOrEqual) hash ^= GreaterOrEqual.GetHashCode();
      if (HasEqual) hash ^= Equal.GetHashCode();
      if (constraintCase_ == ConstraintOneofCase.InSet) hash ^= InSet.GetHashCode();
      if (constraintCase_ == ConstraintOneofCase.NotInSet) hash ^= NotInSet.GetHashCode();
      hash ^= (int) constraintCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasLessThan) {
        output.WriteRawTag(8);
        output.WriteInt64(LessThan);
      }
      if (HasGreaterThan) {
        output.WriteRawTag(16);
        output.WriteInt64(GreaterThan);
      }
      if (HasLessOrEqual) {
        output.WriteRawTag(24);
        output.WriteInt64(LessOrEqual);
      }
      if (HasGreaterOrEqual) {
        output.WriteRawTag(32);
        output.WriteInt64(GreaterOrEqual);
      }
      if (HasEqual) {
        output.WriteRawTag(40);
        output.WriteInt64(Equal);
      }
      if (constraintCase_ == ConstraintOneofCase.InSet) {
        output.WriteRawTag(50);
        output.WriteMessage(InSet);
      }
      if (constraintCase_ == ConstraintOneofCase.NotInSet) {
        output.WriteRawTag(58);
        output.WriteMessage(NotInSet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasLessThan) {
        output.WriteRawTag(8);
        output.WriteInt64(LessThan);
      }
      if (HasGreaterThan) {
        output.WriteRawTag(16);
        output.WriteInt64(GreaterThan);
      }
      if (HasLessOrEqual) {
        output.WriteRawTag(24);
        output.WriteInt64(LessOrEqual);
      }
      if (HasGreaterOrEqual) {
        output.WriteRawTag(32);
        output.WriteInt64(GreaterOrEqual);
      }
      if (HasEqual) {
        output.WriteRawTag(40);
        output.WriteInt64(Equal);
      }
      if (constraintCase_ == ConstraintOneofCase.InSet) {
        output.WriteRawTag(50);
        output.WriteMessage(InSet);
      }
      if (constraintCase_ == ConstraintOneofCase.NotInSet) {
        output.WriteRawTag(58);
        output.WriteMessage(NotInSet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasLessThan) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LessThan);
      }
      if (HasGreaterThan) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GreaterThan);
      }
      if (HasLessOrEqual) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LessOrEqual);
      }
      if (HasGreaterOrEqual) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GreaterOrEqual);
      }
      if (HasEqual) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Equal);
      }
      if (constraintCase_ == ConstraintOneofCase.InSet) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InSet);
      }
      if (constraintCase_ == ConstraintOneofCase.NotInSet) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NotInSet);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IntConstraintV1 other) {
      if (other == null) {
        return;
      }
      switch (other.ConstraintCase) {
        case ConstraintOneofCase.LessThan:
          LessThan = other.LessThan;
          break;
        case ConstraintOneofCase.GreaterThan:
          GreaterThan = other.GreaterThan;
          break;
        case ConstraintOneofCase.LessOrEqual:
          LessOrEqual = other.LessOrEqual;
          break;
        case ConstraintOneofCase.GreaterOrEqual:
          GreaterOrEqual = other.GreaterOrEqual;
          break;
        case ConstraintOneofCase.Equal:
          Equal = other.Equal;
          break;
        case ConstraintOneofCase.InSet:
          if (InSet == null) {
            InSet = new global::Biscuit.Format.Schema.IntSet();
          }
          InSet.MergeFrom(other.InSet);
          break;
        case ConstraintOneofCase.NotInSet:
          if (NotInSet == null) {
            NotInSet = new global::Biscuit.Format.Schema.IntSet();
          }
          NotInSet.MergeFrom(other.NotInSet);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LessThan = input.ReadInt64();
            break;
          }
          case 16: {
            GreaterThan = input.ReadInt64();
            break;
          }
          case 24: {
            LessOrEqual = input.ReadInt64();
            break;
          }
          case 32: {
            GreaterOrEqual = input.ReadInt64();
            break;
          }
          case 40: {
            Equal = input.ReadInt64();
            break;
          }
          case 50: {
            global::Biscuit.Format.Schema.IntSet subBuilder = new global::Biscuit.Format.Schema.IntSet();
            if (constraintCase_ == ConstraintOneofCase.InSet) {
              subBuilder.MergeFrom(InSet);
            }
            input.ReadMessage(subBuilder);
            InSet = subBuilder;
            break;
          }
          case 58: {
            global::Biscuit.Format.Schema.IntSet subBuilder = new global::Biscuit.Format.Schema.IntSet();
            if (constraintCase_ == ConstraintOneofCase.NotInSet) {
              subBuilder.MergeFrom(NotInSet);
            }
            input.ReadMessage(subBuilder);
            NotInSet = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            LessThan = input.ReadInt64();
            break;
          }
          case 16: {
            GreaterThan = input.ReadInt64();
            break;
          }
          case 24: {
            LessOrEqual = input.ReadInt64();
            break;
          }
          case 32: {
            GreaterOrEqual = input.ReadInt64();
            break;
          }
          case 40: {
            Equal = input.ReadInt64();
            break;
          }
          case 50: {
            global::Biscuit.Format.Schema.IntSet subBuilder = new global::Biscuit.Format.Schema.IntSet();
            if (constraintCase_ == ConstraintOneofCase.InSet) {
              subBuilder.MergeFrom(InSet);
            }
            input.ReadMessage(subBuilder);
            InSet = subBuilder;
            break;
          }
          case 58: {
            global::Biscuit.Format.Schema.IntSet subBuilder = new global::Biscuit.Format.Schema.IntSet();
            if (constraintCase_ == ConstraintOneofCase.NotInSet) {
              subBuilder.MergeFrom(NotInSet);
            }
            input.ReadMessage(subBuilder);
            NotInSet = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class IntSet : pb::IMessage<IntSet>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<IntSet> _parser = new pb::MessageParser<IntSet>(() => new IntSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IntSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Biscuit.Format.Schema.SchemaReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntSet(IntSet other) : this() {
      set_ = other.set_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntSet Clone() {
      return new IntSet(this);
    }

    /// <summary>Field number for the "set" field.</summary>
    public const int SetFieldNumber = 7;
    private static readonly pb::FieldCodec<long> _repeated_set_codec
        = pb::FieldCodec.ForInt64(58);
    private readonly pbc::RepeatedField<long> set_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Set {
      get { return set_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IntSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IntSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!set_.Equals(other.set_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= set_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      set_.WriteTo(output, _repeated_set_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      set_.WriteTo(ref output, _repeated_set_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += set_.CalculateSize(_repeated_set_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IntSet other) {
      if (other == null) {
        return;
      }
      set_.Add(other.set_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 58:
          case 56: {
            set_.AddEntriesFrom(input, _repeated_set_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 58:
          case 56: {
            set_.AddEntriesFrom(ref input, _repeated_set_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class StringConstraintV1 : pb::IMessage<StringConstraintV1>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StringConstraintV1> _parser = new pb::MessageParser<StringConstraintV1>(() => new StringConstraintV1());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StringConstraintV1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Biscuit.Format.Schema.SchemaReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringConstraintV1() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringConstraintV1(StringConstraintV1 other) : this() {
      switch (other.ConstraintCase) {
        case ConstraintOneofCase.Prefix:
          Prefix = other.Prefix;
          break;
        case ConstraintOneofCase.Suffix:
          Suffix = other.Suffix;
          break;
        case ConstraintOneofCase.Equal:
          Equal = other.Equal;
          break;
        case ConstraintOneofCase.InSet:
          InSet = other.InSet.Clone();
          break;
        case ConstraintOneofCase.NotInSet:
          NotInSet = other.NotInSet.Clone();
          break;
        case ConstraintOneofCase.Regex:
          Regex = other.Regex;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringConstraintV1 Clone() {
      return new StringConstraintV1(this);
    }

    /// <summary>Field number for the "prefix" field.</summary>
    public const int PrefixFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Prefix {
      get { return HasPrefix ? (string) constraint_ : ""; }
      set {
        constraint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        constraintCase_ = ConstraintOneofCase.Prefix;
      }
    }
    /// <summary>Gets whether the "prefix" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrefix {
      get { return constraintCase_ == ConstraintOneofCase.Prefix; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "prefix" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrefix() {
      if (HasPrefix) {
        ClearConstraint();
      }
    }

    /// <summary>Field number for the "suffix" field.</summary>
    public const int SuffixFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Suffix {
      get { return HasSuffix ? (string) constraint_ : ""; }
      set {
        constraint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        constraintCase_ = ConstraintOneofCase.Suffix;
      }
    }
    /// <summary>Gets whether the "suffix" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSuffix {
      get { return constraintCase_ == ConstraintOneofCase.Suffix; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "suffix" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSuffix() {
      if (HasSuffix) {
        ClearConstraint();
      }
    }

    /// <summary>Field number for the "equal" field.</summary>
    public const int EqualFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Equal {
      get { return HasEqual ? (string) constraint_ : ""; }
      set {
        constraint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        constraintCase_ = ConstraintOneofCase.Equal;
      }
    }
    /// <summary>Gets whether the "equal" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEqual {
      get { return constraintCase_ == ConstraintOneofCase.Equal; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "equal" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEqual() {
      if (HasEqual) {
        ClearConstraint();
      }
    }

    /// <summary>Field number for the "in_set" field.</summary>
    public const int InSetFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Biscuit.Format.Schema.StringSet InSet {
      get { return constraintCase_ == ConstraintOneofCase.InSet ? (global::Biscuit.Format.Schema.StringSet) constraint_ : null; }
      set {
        constraint_ = value;
        constraintCase_ = value == null ? ConstraintOneofCase.None : ConstraintOneofCase.InSet;
      }
    }

    /// <summary>Field number for the "not_in_set" field.</summary>
    public const int NotInSetFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Biscuit.Format.Schema.StringSet NotInSet {
      get { return constraintCase_ == ConstraintOneofCase.NotInSet ? (global::Biscuit.Format.Schema.StringSet) constraint_ : null; }
      set {
        constraint_ = value;
        constraintCase_ = value == null ? ConstraintOneofCase.None : ConstraintOneofCase.NotInSet;
      }
    }

    /// <summary>Field number for the "regex" field.</summary>
    public const int RegexFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Regex {
      get { return HasRegex ? (string) constraint_ : ""; }
      set {
        constraint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        constraintCase_ = ConstraintOneofCase.Regex;
      }
    }
    /// <summary>Gets whether the "regex" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRegex {
      get { return constraintCase_ == ConstraintOneofCase.Regex; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "regex" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRegex() {
      if (HasRegex) {
        ClearConstraint();
      }
    }

    private object constraint_;
    /// <summary>Enum of possible cases for the "Constraint" oneof.</summary>
    public enum ConstraintOneofCase {
      None = 0,
      Prefix = 1,
      Suffix = 2,
      Equal = 3,
      InSet = 4,
      NotInSet = 5,
      Regex = 6,
    }
    private ConstraintOneofCase constraintCase_ = ConstraintOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConstraintOneofCase ConstraintCase {
      get { return constraintCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConstraint() {
      constraintCase_ = ConstraintOneofCase.None;
      constraint_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StringConstraintV1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StringConstraintV1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Prefix != other.Prefix) return false;
      if (Suffix != other.Suffix) return false;
      if (Equal != other.Equal) return false;
      if (!object.Equals(InSet, other.InSet)) return false;
      if (!object.Equals(NotInSet, other.NotInSet)) return false;
      if (Regex != other.Regex) return false;
      if (ConstraintCase != other.ConstraintCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPrefix) hash ^= Prefix.GetHashCode();
      if (HasSuffix) hash ^= Suffix.GetHashCode();
      if (HasEqual) hash ^= Equal.GetHashCode();
      if (constraintCase_ == ConstraintOneofCase.InSet) hash ^= InSet.GetHashCode();
      if (constraintCase_ == ConstraintOneofCase.NotInSet) hash ^= NotInSet.GetHashCode();
      if (HasRegex) hash ^= Regex.GetHashCode();
      hash ^= (int) constraintCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPrefix) {
        output.WriteRawTag(10);
        output.WriteString(Prefix);
      }
      if (HasSuffix) {
        output.WriteRawTag(18);
        output.WriteString(Suffix);
      }
      if (HasEqual) {
        output.WriteRawTag(26);
        output.WriteString(Equal);
      }
      if (constraintCase_ == ConstraintOneofCase.InSet) {
        output.WriteRawTag(34);
        output.WriteMessage(InSet);
      }
      if (constraintCase_ == ConstraintOneofCase.NotInSet) {
        output.WriteRawTag(42);
        output.WriteMessage(NotInSet);
      }
      if (HasRegex) {
        output.WriteRawTag(50);
        output.WriteString(Regex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPrefix) {
        output.WriteRawTag(10);
        output.WriteString(Prefix);
      }
      if (HasSuffix) {
        output.WriteRawTag(18);
        output.WriteString(Suffix);
      }
      if (HasEqual) {
        output.WriteRawTag(26);
        output.WriteString(Equal);
      }
      if (constraintCase_ == ConstraintOneofCase.InSet) {
        output.WriteRawTag(34);
        output.WriteMessage(InSet);
      }
      if (constraintCase_ == ConstraintOneofCase.NotInSet) {
        output.WriteRawTag(42);
        output.WriteMessage(NotInSet);
      }
      if (HasRegex) {
        output.WriteRawTag(50);
        output.WriteString(Regex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPrefix) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Prefix);
      }
      if (HasSuffix) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Suffix);
      }
      if (HasEqual) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Equal);
      }
      if (constraintCase_ == ConstraintOneofCase.InSet) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InSet);
      }
      if (constraintCase_ == ConstraintOneofCase.NotInSet) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NotInSet);
      }
      if (HasRegex) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Regex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StringConstraintV1 other) {
      if (other == null) {
        return;
      }
      switch (other.ConstraintCase) {
        case ConstraintOneofCase.Prefix:
          Prefix = other.Prefix;
          break;
        case ConstraintOneofCase.Suffix:
          Suffix = other.Suffix;
          break;
        case ConstraintOneofCase.Equal:
          Equal = other.Equal;
          break;
        case ConstraintOneofCase.InSet:
          if (InSet == null) {
            InSet = new global::Biscuit.Format.Schema.StringSet();
          }
          InSet.MergeFrom(other.InSet);
          break;
        case ConstraintOneofCase.NotInSet:
          if (NotInSet == null) {
            NotInSet = new global::Biscuit.Format.Schema.StringSet();
          }
          NotInSet.MergeFrom(other.NotInSet);
          break;
        case ConstraintOneofCase.Regex:
          Regex = other.Regex;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Prefix = input.ReadString();
            break;
          }
          case 18: {
            Suffix = input.ReadString();
            break;
          }
          case 26: {
            Equal = input.ReadString();
            break;
          }
          case 34: {
            global::Biscuit.Format.Schema.StringSet subBuilder = new global::Biscuit.Format.Schema.StringSet();
            if (constraintCase_ == ConstraintOneofCase.InSet) {
              subBuilder.MergeFrom(InSet);
            }
            input.ReadMessage(subBuilder);
            InSet = subBuilder;
            break;
          }
          case 42: {
            global::Biscuit.Format.Schema.StringSet subBuilder = new global::Biscuit.Format.Schema.StringSet();
            if (constraintCase_ == ConstraintOneofCase.NotInSet) {
              subBuilder.MergeFrom(NotInSet);
            }
            input.ReadMessage(subBuilder);
            NotInSet = subBuilder;
            break;
          }
          case 50: {
            Regex = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Prefix = input.ReadString();
            break;
          }
          case 18: {
            Suffix = input.ReadString();
            break;
          }
          case 26: {
            Equal = input.ReadString();
            break;
          }
          case 34: {
            global::Biscuit.Format.Schema.StringSet subBuilder = new global::Biscuit.Format.Schema.StringSet();
            if (constraintCase_ == ConstraintOneofCase.InSet) {
              subBuilder.MergeFrom(InSet);
            }
            input.ReadMessage(subBuilder);
            InSet = subBuilder;
            break;
          }
          case 42: {
            global::Biscuit.Format.Schema.StringSet subBuilder = new global::Biscuit.Format.Schema.StringSet();
            if (constraintCase_ == ConstraintOneofCase.NotInSet) {
              subBuilder.MergeFrom(NotInSet);
            }
            input.ReadMessage(subBuilder);
            NotInSet = subBuilder;
            break;
          }
          case 50: {
            Regex = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class StringSet : pb::IMessage<StringSet>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StringSet> _parser = new pb::MessageParser<StringSet>(() => new StringSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StringSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Biscuit.Format.Schema.SchemaReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringSet(StringSet other) : this() {
      set_ = other.set_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringSet Clone() {
      return new StringSet(this);
    }

    /// <summary>Field number for the "set" field.</summary>
    public const int SetFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_set_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> set_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Set {
      get { return set_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StringSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StringSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!set_.Equals(other.set_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= set_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      set_.WriteTo(output, _repeated_set_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      set_.WriteTo(ref output, _repeated_set_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += set_.CalculateSize(_repeated_set_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StringSet other) {
      if (other == null) {
        return;
      }
      set_.Add(other.set_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            set_.AddEntriesFrom(input, _repeated_set_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            set_.AddEntriesFrom(ref input, _repeated_set_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DateConstraintV1 : pb::IMessage<DateConstraintV1>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DateConstraintV1> _parser = new pb::MessageParser<DateConstraintV1>(() => new DateConstraintV1());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DateConstraintV1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Biscuit.Format.Schema.SchemaReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DateConstraintV1() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DateConstraintV1(DateConstraintV1 other) : this() {
      switch (other.ConstraintCase) {
        case ConstraintOneofCase.Before:
          Before = other.Before;
          break;
        case ConstraintOneofCase.After:
          After = other.After;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DateConstraintV1 Clone() {
      return new DateConstraintV1(this);
    }

    /// <summary>Field number for the "before" field.</summary>
    public const int BeforeFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Before {
      get { return HasBefore ? (ulong) constraint_ : 0UL; }
      set {
        constraint_ = value;
        constraintCase_ = ConstraintOneofCase.Before;
      }
    }
    /// <summary>Gets whether the "before" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBefore {
      get { return constraintCase_ == ConstraintOneofCase.Before; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "before" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBefore() {
      if (HasBefore) {
        ClearConstraint();
      }
    }

    /// <summary>Field number for the "after" field.</summary>
    public const int AfterFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong After {
      get { return HasAfter ? (ulong) constraint_ : 0UL; }
      set {
        constraint_ = value;
        constraintCase_ = ConstraintOneofCase.After;
      }
    }
    /// <summary>Gets whether the "after" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAfter {
      get { return constraintCase_ == ConstraintOneofCase.After; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "after" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAfter() {
      if (HasAfter) {
        ClearConstraint();
      }
    }

    private object constraint_;
    /// <summary>Enum of possible cases for the "Constraint" oneof.</summary>
    public enum ConstraintOneofCase {
      None = 0,
      Before = 1,
      After = 2,
    }
    private ConstraintOneofCase constraintCase_ = ConstraintOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConstraintOneofCase ConstraintCase {
      get { return constraintCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConstraint() {
      constraintCase_ = ConstraintOneofCase.None;
      constraint_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DateConstraintV1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DateConstraintV1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Before != other.Before) return false;
      if (After != other.After) return false;
      if (ConstraintCase != other.ConstraintCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasBefore) hash ^= Before.GetHashCode();
      if (HasAfter) hash ^= After.GetHashCode();
      hash ^= (int) constraintCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasBefore) {
        output.WriteRawTag(8);
        output.WriteUInt64(Before);
      }
      if (HasAfter) {
        output.WriteRawTag(16);
        output.WriteUInt64(After);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasBefore) {
        output.WriteRawTag(8);
        output.WriteUInt64(Before);
      }
      if (HasAfter) {
        output.WriteRawTag(16);
        output.WriteUInt64(After);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasBefore) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Before);
      }
      if (HasAfter) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(After);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DateConstraintV1 other) {
      if (other == null) {
        return;
      }
      switch (other.ConstraintCase) {
        case ConstraintOneofCase.Before:
          Before = other.Before;
          break;
        case ConstraintOneofCase.After:
          After = other.After;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Before = input.ReadUInt64();
            break;
          }
          case 16: {
            After = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Before = input.ReadUInt64();
            break;
          }
          case 16: {
            After = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SymbolConstraintV1 : pb::IMessage<SymbolConstraintV1>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SymbolConstraintV1> _parser = new pb::MessageParser<SymbolConstraintV1>(() => new SymbolConstraintV1());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SymbolConstraintV1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Biscuit.Format.Schema.SchemaReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolConstraintV1() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolConstraintV1(SymbolConstraintV1 other) : this() {
      switch (other.ConstraintCase) {
        case ConstraintOneofCase.InSet:
          InSet = other.InSet.Clone();
          break;
        case ConstraintOneofCase.NotInSet:
          NotInSet = other.NotInSet.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolConstraintV1 Clone() {
      return new SymbolConstraintV1(this);
    }

    /// <summary>Field number for the "in_set" field.</summary>
    public const int InSetFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Biscuit.Format.Schema.SymbolSet InSet {
      get { return constraintCase_ == ConstraintOneofCase.InSet ? (global::Biscuit.Format.Schema.SymbolSet) constraint_ : null; }
      set {
        constraint_ = value;
        constraintCase_ = value == null ? ConstraintOneofCase.None : ConstraintOneofCase.InSet;
      }
    }

    /// <summary>Field number for the "not_in_set" field.</summary>
    public const int NotInSetFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Biscuit.Format.Schema.SymbolSet NotInSet {
      get { return constraintCase_ == ConstraintOneofCase.NotInSet ? (global::Biscuit.Format.Schema.SymbolSet) constraint_ : null; }
      set {
        constraint_ = value;
        constraintCase_ = value == null ? ConstraintOneofCase.None : ConstraintOneofCase.NotInSet;
      }
    }

    private object constraint_;
    /// <summary>Enum of possible cases for the "Constraint" oneof.</summary>
    public enum ConstraintOneofCase {
      None = 0,
      InSet = 1,
      NotInSet = 2,
    }
    private ConstraintOneofCase constraintCase_ = ConstraintOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConstraintOneofCase ConstraintCase {
      get { return constraintCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConstraint() {
      constraintCase_ = ConstraintOneofCase.None;
      constraint_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SymbolConstraintV1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SymbolConstraintV1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(InSet, other.InSet)) return false;
      if (!object.Equals(NotInSet, other.NotInSet)) return false;
      if (ConstraintCase != other.ConstraintCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (constraintCase_ == ConstraintOneofCase.InSet) hash ^= InSet.GetHashCode();
      if (constraintCase_ == ConstraintOneofCase.NotInSet) hash ^= NotInSet.GetHashCode();
      hash ^= (int) constraintCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (constraintCase_ == ConstraintOneofCase.InSet) {
        output.WriteRawTag(10);
        output.WriteMessage(InSet);
      }
      if (constraintCase_ == ConstraintOneofCase.NotInSet) {
        output.WriteRawTag(18);
        output.WriteMessage(NotInSet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (constraintCase_ == ConstraintOneofCase.InSet) {
        output.WriteRawTag(10);
        output.WriteMessage(InSet);
      }
      if (constraintCase_ == ConstraintOneofCase.NotInSet) {
        output.WriteRawTag(18);
        output.WriteMessage(NotInSet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (constraintCase_ == ConstraintOneofCase.InSet) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InSet);
      }
      if (constraintCase_ == ConstraintOneofCase.NotInSet) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NotInSet);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SymbolConstraintV1 other) {
      if (other == null) {
        return;
      }
      switch (other.ConstraintCase) {
        case ConstraintOneofCase.InSet:
          if (InSet == null) {
            InSet = new global::Biscuit.Format.Schema.SymbolSet();
          }
          InSet.MergeFrom(other.InSet);
          break;
        case ConstraintOneofCase.NotInSet:
          if (NotInSet == null) {
            NotInSet = new global::Biscuit.Format.Schema.SymbolSet();
          }
          NotInSet.MergeFrom(other.NotInSet);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Biscuit.Format.Schema.SymbolSet subBuilder = new global::Biscuit.Format.Schema.SymbolSet();
            if (constraintCase_ == ConstraintOneofCase.InSet) {
              subBuilder.MergeFrom(InSet);
            }
            input.ReadMessage(subBuilder);
            InSet = subBuilder;
            break;
          }
          case 18: {
            global::Biscuit.Format.Schema.SymbolSet subBuilder = new global::Biscuit.Format.Schema.SymbolSet();
            if (constraintCase_ == ConstraintOneofCase.NotInSet) {
              subBuilder.MergeFrom(NotInSet);
            }
            input.ReadMessage(subBuilder);
            NotInSet = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Biscuit.Format.Schema.SymbolSet subBuilder = new global::Biscuit.Format.Schema.SymbolSet();
            if (constraintCase_ == ConstraintOneofCase.InSet) {
              subBuilder.MergeFrom(InSet);
            }
            input.ReadMessage(subBuilder);
            InSet = subBuilder;
            break;
          }
          case 18: {
            global::Biscuit.Format.Schema.SymbolSet subBuilder = new global::Biscuit.Format.Schema.SymbolSet();
            if (constraintCase_ == ConstraintOneofCase.NotInSet) {
              subBuilder.MergeFrom(NotInSet);
            }
            input.ReadMessage(subBuilder);
            NotInSet = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SymbolSet : pb::IMessage<SymbolSet>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SymbolSet> _parser = new pb::MessageParser<SymbolSet>(() => new SymbolSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SymbolSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Biscuit.Format.Schema.SchemaReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolSet(SymbolSet other) : this() {
      set_ = other.set_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolSet Clone() {
      return new SymbolSet(this);
    }

    /// <summary>Field number for the "set" field.</summary>
    public const int SetFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_set_codec
        = pb::FieldCodec.ForUInt64(10);
    private readonly pbc::RepeatedField<ulong> set_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Set {
      get { return set_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SymbolSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SymbolSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!set_.Equals(other.set_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= set_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      set_.WriteTo(output, _repeated_set_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      set_.WriteTo(ref output, _repeated_set_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += set_.CalculateSize(_repeated_set_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SymbolSet other) {
      if (other == null) {
        return;
      }
      set_.Add(other.set_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            set_.AddEntriesFrom(input, _repeated_set_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            set_.AddEntriesFrom(ref input, _repeated_set_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BytesConstraintV1 : pb::IMessage<BytesConstraintV1>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BytesConstraintV1> _parser = new pb::MessageParser<BytesConstraintV1>(() => new BytesConstraintV1());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BytesConstraintV1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Biscuit.Format.Schema.SchemaReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BytesConstraintV1() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BytesConstraintV1(BytesConstraintV1 other) : this() {
      switch (other.ConstraintCase) {
        case ConstraintOneofCase.Equal:
          Equal = other.Equal;
          break;
        case ConstraintOneofCase.InSet:
          InSet = other.InSet.Clone();
          break;
        case ConstraintOneofCase.NotInSet:
          NotInSet = other.NotInSet.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BytesConstraintV1 Clone() {
      return new BytesConstraintV1(this);
    }

    /// <summary>Field number for the "equal" field.</summary>
    public const int EqualFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Equal {
      get { return HasEqual ? (pb::ByteString) constraint_ : pb::ByteString.Empty; }
      set {
        constraint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        constraintCase_ = ConstraintOneofCase.Equal;
      }
    }
    /// <summary>Gets whether the "equal" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEqual {
      get { return constraintCase_ == ConstraintOneofCase.Equal; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "equal" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEqual() {
      if (HasEqual) {
        ClearConstraint();
      }
    }

    /// <summary>Field number for the "in_set" field.</summary>
    public const int InSetFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Biscuit.Format.Schema.BytesSet InSet {
      get { return constraintCase_ == ConstraintOneofCase.InSet ? (global::Biscuit.Format.Schema.BytesSet) constraint_ : null; }
      set {
        constraint_ = value;
        constraintCase_ = value == null ? ConstraintOneofCase.None : ConstraintOneofCase.InSet;
      }
    }

    /// <summary>Field number for the "not_in_set" field.</summary>
    public const int NotInSetFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Biscuit.Format.Schema.BytesSet NotInSet {
      get { return constraintCase_ == ConstraintOneofCase.NotInSet ? (global::Biscuit.Format.Schema.BytesSet) constraint_ : null; }
      set {
        constraint_ = value;
        constraintCase_ = value == null ? ConstraintOneofCase.None : ConstraintOneofCase.NotInSet;
      }
    }

    private object constraint_;
    /// <summary>Enum of possible cases for the "Constraint" oneof.</summary>
    public enum ConstraintOneofCase {
      None = 0,
      Equal = 1,
      InSet = 2,
      NotInSet = 3,
    }
    private ConstraintOneofCase constraintCase_ = ConstraintOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConstraintOneofCase ConstraintCase {
      get { return constraintCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConstraint() {
      constraintCase_ = ConstraintOneofCase.None;
      constraint_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BytesConstraintV1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BytesConstraintV1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Equal != other.Equal) return false;
      if (!object.Equals(InSet, other.InSet)) return false;
      if (!object.Equals(NotInSet, other.NotInSet)) return false;
      if (ConstraintCase != other.ConstraintCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEqual) hash ^= Equal.GetHashCode();
      if (constraintCase_ == ConstraintOneofCase.InSet) hash ^= InSet.GetHashCode();
      if (constraintCase_ == ConstraintOneofCase.NotInSet) hash ^= NotInSet.GetHashCode();
      hash ^= (int) constraintCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasEqual) {
        output.WriteRawTag(10);
        output.WriteBytes(Equal);
      }
      if (constraintCase_ == ConstraintOneofCase.InSet) {
        output.WriteRawTag(18);
        output.WriteMessage(InSet);
      }
      if (constraintCase_ == ConstraintOneofCase.NotInSet) {
        output.WriteRawTag(26);
        output.WriteMessage(NotInSet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasEqual) {
        output.WriteRawTag(10);
        output.WriteBytes(Equal);
      }
      if (constraintCase_ == ConstraintOneofCase.InSet) {
        output.WriteRawTag(18);
        output.WriteMessage(InSet);
      }
      if (constraintCase_ == ConstraintOneofCase.NotInSet) {
        output.WriteRawTag(26);
        output.WriteMessage(NotInSet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEqual) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Equal);
      }
      if (constraintCase_ == ConstraintOneofCase.InSet) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InSet);
      }
      if (constraintCase_ == ConstraintOneofCase.NotInSet) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NotInSet);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BytesConstraintV1 other) {
      if (other == null) {
        return;
      }
      switch (other.ConstraintCase) {
        case ConstraintOneofCase.Equal:
          Equal = other.Equal;
          break;
        case ConstraintOneofCase.InSet:
          if (InSet == null) {
            InSet = new global::Biscuit.Format.Schema.BytesSet();
          }
          InSet.MergeFrom(other.InSet);
          break;
        case ConstraintOneofCase.NotInSet:
          if (NotInSet == null) {
            NotInSet = new global::Biscuit.Format.Schema.BytesSet();
          }
          NotInSet.MergeFrom(other.NotInSet);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Equal = input.ReadBytes();
            break;
          }
          case 18: {
            global::Biscuit.Format.Schema.BytesSet subBuilder = new global::Biscuit.Format.Schema.BytesSet();
            if (constraintCase_ == ConstraintOneofCase.InSet) {
              subBuilder.MergeFrom(InSet);
            }
            input.ReadMessage(subBuilder);
            InSet = subBuilder;
            break;
          }
          case 26: {
            global::Biscuit.Format.Schema.BytesSet subBuilder = new global::Biscuit.Format.Schema.BytesSet();
            if (constraintCase_ == ConstraintOneofCase.NotInSet) {
              subBuilder.MergeFrom(NotInSet);
            }
            input.ReadMessage(subBuilder);
            NotInSet = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Equal = input.ReadBytes();
            break;
          }
          case 18: {
            global::Biscuit.Format.Schema.BytesSet subBuilder = new global::Biscuit.Format.Schema.BytesSet();
            if (constraintCase_ == ConstraintOneofCase.InSet) {
              subBuilder.MergeFrom(InSet);
            }
            input.ReadMessage(subBuilder);
            InSet = subBuilder;
            break;
          }
          case 26: {
            global::Biscuit.Format.Schema.BytesSet subBuilder = new global::Biscuit.Format.Schema.BytesSet();
            if (constraintCase_ == ConstraintOneofCase.NotInSet) {
              subBuilder.MergeFrom(NotInSet);
            }
            input.ReadMessage(subBuilder);
            NotInSet = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BytesSet : pb::IMessage<BytesSet>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BytesSet> _parser = new pb::MessageParser<BytesSet>(() => new BytesSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BytesSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Biscuit.Format.Schema.SchemaReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BytesSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BytesSet(BytesSet other) : this() {
      set_ = other.set_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BytesSet Clone() {
      return new BytesSet(this);
    }

    /// <summary>Field number for the "set" field.</summary>
    public const int SetFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_set_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> set_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Set {
      get { return set_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BytesSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BytesSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!set_.Equals(other.set_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= set_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      set_.WriteTo(output, _repeated_set_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      set_.WriteTo(ref output, _repeated_set_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += set_.CalculateSize(_repeated_set_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BytesSet other) {
      if (other == null) {
        return;
      }
      set_.Add(other.set_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            set_.AddEntriesFrom(input, _repeated_set_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            set_.AddEntriesFrom(ref input, _repeated_set_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ExpressionV1 : pb::IMessage<ExpressionV1>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ExpressionV1> _parser = new pb::MessageParser<ExpressionV1>(() => new ExpressionV1());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExpressionV1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Biscuit.Format.Schema.SchemaReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExpressionV1() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExpressionV1(ExpressionV1 other) : this() {
      ops_ = other.ops_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExpressionV1 Clone() {
      return new ExpressionV1(this);
    }

    /// <summary>Field number for the "ops" field.</summary>
    public const int OpsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Biscuit.Format.Schema.Op> _repeated_ops_codec
        = pb::FieldCodec.ForMessage(10, global::Biscuit.Format.Schema.Op.Parser);
    private readonly pbc::RepeatedField<global::Biscuit.Format.Schema.Op> ops_ = new pbc::RepeatedField<global::Biscuit.Format.Schema.Op>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Biscuit.Format.Schema.Op> Ops {
      get { return ops_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExpressionV1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExpressionV1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ops_.Equals(other.ops_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ops_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      ops_.WriteTo(output, _repeated_ops_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      ops_.WriteTo(ref output, _repeated_ops_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ops_.CalculateSize(_repeated_ops_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExpressionV1 other) {
      if (other == null) {
        return;
      }
      ops_.Add(other.ops_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ops_.AddEntriesFrom(input, _repeated_ops_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ops_.AddEntriesFrom(ref input, _repeated_ops_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Op : pb::IMessage<Op>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Op> _parser = new pb::MessageParser<Op>(() => new Op());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Op> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Biscuit.Format.Schema.SchemaReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Op() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Op(Op other) : this() {
      switch (other.ContentCase) {
        case ContentOneofCase.Value:
          Value = other.Value.Clone();
          break;
        case ContentOneofCase.Unary:
          Unary = other.Unary.Clone();
          break;
        case ContentOneofCase.Binary:
          Binary = other.Binary.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Op Clone() {
      return new Op(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Biscuit.Format.Schema.IDV1 Value {
      get { return contentCase_ == ContentOneofCase.Value ? (global::Biscuit.Format.Schema.IDV1) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.Value;
      }
    }

    /// <summary>Field number for the "unary" field.</summary>
    public const int UnaryFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Biscuit.Format.Schema.OpUnary Unary {
      get { return contentCase_ == ContentOneofCase.Unary ? (global::Biscuit.Format.Schema.OpUnary) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.Unary;
      }
    }

    /// <summary>Field number for the "Binary" field.</summary>
    public const int BinaryFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Biscuit.Format.Schema.OpBinary Binary {
      get { return contentCase_ == ContentOneofCase.Binary ? (global::Biscuit.Format.Schema.OpBinary) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.Binary;
      }
    }

    private object content_;
    /// <summary>Enum of possible cases for the "Content" oneof.</summary>
    public enum ContentOneofCase {
      None = 0,
      Value = 1,
      Unary = 2,
      Binary = 3,
    }
    private ContentOneofCase contentCase_ = ContentOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentOneofCase ContentCase {
      get { return contentCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContent() {
      contentCase_ = ContentOneofCase.None;
      content_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Op);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Op other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Value, other.Value)) return false;
      if (!object.Equals(Unary, other.Unary)) return false;
      if (!object.Equals(Binary, other.Binary)) return false;
      if (ContentCase != other.ContentCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (contentCase_ == ContentOneofCase.Value) hash ^= Value.GetHashCode();
      if (contentCase_ == ContentOneofCase.Unary) hash ^= Unary.GetHashCode();
      if (contentCase_ == ContentOneofCase.Binary) hash ^= Binary.GetHashCode();
      hash ^= (int) contentCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (contentCase_ == ContentOneofCase.Value) {
        output.WriteRawTag(10);
        output.WriteMessage(Value);
      }
      if (contentCase_ == ContentOneofCase.Unary) {
        output.WriteRawTag(18);
        output.WriteMessage(Unary);
      }
      if (contentCase_ == ContentOneofCase.Binary) {
        output.WriteRawTag(26);
        output.WriteMessage(Binary);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (contentCase_ == ContentOneofCase.Value) {
        output.WriteRawTag(10);
        output.WriteMessage(Value);
      }
      if (contentCase_ == ContentOneofCase.Unary) {
        output.WriteRawTag(18);
        output.WriteMessage(Unary);
      }
      if (contentCase_ == ContentOneofCase.Binary) {
        output.WriteRawTag(26);
        output.WriteMessage(Binary);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (contentCase_ == ContentOneofCase.Value) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      if (contentCase_ == ContentOneofCase.Unary) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Unary);
      }
      if (contentCase_ == ContentOneofCase.Binary) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Binary);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Op other) {
      if (other == null) {
        return;
      }
      switch (other.ContentCase) {
        case ContentOneofCase.Value:
          if (Value == null) {
            Value = new global::Biscuit.Format.Schema.IDV1();
          }
          Value.MergeFrom(other.Value);
          break;
        case ContentOneofCase.Unary:
          if (Unary == null) {
            Unary = new global::Biscuit.Format.Schema.OpUnary();
          }
          Unary.MergeFrom(other.Unary);
          break;
        case ContentOneofCase.Binary:
          if (Binary == null) {
            Binary = new global::Biscuit.Format.Schema.OpBinary();
          }
          Binary.MergeFrom(other.Binary);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Biscuit.Format.Schema.IDV1 subBuilder = new global::Biscuit.Format.Schema.IDV1();
            if (contentCase_ == ContentOneofCase.Value) {
              subBuilder.MergeFrom(Value);
            }
            input.ReadMessage(subBuilder);
            Value = subBuilder;
            break;
          }
          case 18: {
            global::Biscuit.Format.Schema.OpUnary subBuilder = new global::Biscuit.Format.Schema.OpUnary();
            if (contentCase_ == ContentOneofCase.Unary) {
              subBuilder.MergeFrom(Unary);
            }
            input.ReadMessage(subBuilder);
            Unary = subBuilder;
            break;
          }
          case 26: {
            global::Biscuit.Format.Schema.OpBinary subBuilder = new global::Biscuit.Format.Schema.OpBinary();
            if (contentCase_ == ContentOneofCase.Binary) {
              subBuilder.MergeFrom(Binary);
            }
            input.ReadMessage(subBuilder);
            Binary = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Biscuit.Format.Schema.IDV1 subBuilder = new global::Biscuit.Format.Schema.IDV1();
            if (contentCase_ == ContentOneofCase.Value) {
              subBuilder.MergeFrom(Value);
            }
            input.ReadMessage(subBuilder);
            Value = subBuilder;
            break;
          }
          case 18: {
            global::Biscuit.Format.Schema.OpUnary subBuilder = new global::Biscuit.Format.Schema.OpUnary();
            if (contentCase_ == ContentOneofCase.Unary) {
              subBuilder.MergeFrom(Unary);
            }
            input.ReadMessage(subBuilder);
            Unary = subBuilder;
            break;
          }
          case 26: {
            global::Biscuit.Format.Schema.OpBinary subBuilder = new global::Biscuit.Format.Schema.OpBinary();
            if (contentCase_ == ContentOneofCase.Binary) {
              subBuilder.MergeFrom(Binary);
            }
            input.ReadMessage(subBuilder);
            Binary = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class OpUnary : pb::IMessage<OpUnary>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OpUnary> _parser = new pb::MessageParser<OpUnary>(() => new OpUnary());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpUnary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Biscuit.Format.Schema.SchemaReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpUnary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpUnary(OpUnary other) : this() {
      _hasBits0 = other._hasBits0;
      kind_ = other.kind_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpUnary Clone() {
      return new OpUnary(this);
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 1;
    private readonly static global::Biscuit.Format.Schema.OpUnary.Types.Kind KindDefaultValue = global::Biscuit.Format.Schema.OpUnary.Types.Kind.Negate;

    private global::Biscuit.Format.Schema.OpUnary.Types.Kind kind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Biscuit.Format.Schema.OpUnary.Types.Kind Kind {
      get { if ((_hasBits0 & 1) != 0) { return kind_; } else { return KindDefaultValue; } }
      set {
        _hasBits0 |= 1;
        kind_ = value;
      }
    }
    /// <summary>Gets whether the "kind" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKind {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "kind" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKind() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpUnary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpUnary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Kind != other.Kind) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasKind) hash ^= Kind.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasKind) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Kind);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasKind) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Kind);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasKind) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpUnary other) {
      if (other == null) {
        return;
      }
      if (other.HasKind) {
        Kind = other.Kind;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Kind = (global::Biscuit.Format.Schema.OpUnary.Types.Kind) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Kind = (global::Biscuit.Format.Schema.OpUnary.Types.Kind) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the OpUnary message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Kind {
        [pbr::OriginalName("Negate")] Negate = 0,
        [pbr::OriginalName("Parens")] Parens = 1,
        [pbr::OriginalName("Length")] Length = 2,
      }

    }
    #endregion

  }

  public sealed partial class OpBinary : pb::IMessage<OpBinary>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OpBinary> _parser = new pb::MessageParser<OpBinary>(() => new OpBinary());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpBinary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Biscuit.Format.Schema.SchemaReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpBinary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpBinary(OpBinary other) : this() {
      _hasBits0 = other._hasBits0;
      kind_ = other.kind_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpBinary Clone() {
      return new OpBinary(this);
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 1;
    private readonly static global::Biscuit.Format.Schema.OpBinary.Types.Kind KindDefaultValue = global::Biscuit.Format.Schema.OpBinary.Types.Kind.LessThan;

    private global::Biscuit.Format.Schema.OpBinary.Types.Kind kind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Biscuit.Format.Schema.OpBinary.Types.Kind Kind {
      get { if ((_hasBits0 & 1) != 0) { return kind_; } else { return KindDefaultValue; } }
      set {
        _hasBits0 |= 1;
        kind_ = value;
      }
    }
    /// <summary>Gets whether the "kind" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKind {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "kind" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKind() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpBinary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpBinary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Kind != other.Kind) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasKind) hash ^= Kind.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasKind) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Kind);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasKind) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Kind);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasKind) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpBinary other) {
      if (other == null) {
        return;
      }
      if (other.HasKind) {
        Kind = other.Kind;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Kind = (global::Biscuit.Format.Schema.OpBinary.Types.Kind) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Kind = (global::Biscuit.Format.Schema.OpBinary.Types.Kind) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the OpBinary message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Kind {
        [pbr::OriginalName("LessThan")] LessThan = 0,
        [pbr::OriginalName("GreaterThan")] GreaterThan = 1,
        [pbr::OriginalName("LessOrEqual")] LessOrEqual = 2,
        [pbr::OriginalName("GreaterOrEqual")] GreaterOrEqual = 3,
        [pbr::OriginalName("Equal")] Equal = 4,
        [pbr::OriginalName("Contains")] Contains = 5,
        [pbr::OriginalName("Prefix")] Prefix = 6,
        [pbr::OriginalName("Suffix")] Suffix = 7,
        [pbr::OriginalName("Regex")] Regex = 8,
        [pbr::OriginalName("Add")] Add = 9,
        [pbr::OriginalName("Sub")] Sub = 10,
        [pbr::OriginalName("Mul")] Mul = 11,
        [pbr::OriginalName("Div")] Div = 12,
        [pbr::OriginalName("And")] And = 13,
        [pbr::OriginalName("Or")] Or = 14,
        [pbr::OriginalName("Intersection")] Intersection = 15,
        [pbr::OriginalName("Union")] Union = 16,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
